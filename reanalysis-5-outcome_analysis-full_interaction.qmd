---
title: "Cell Count Analysis for Lapse × DR × Treatment Interaction (Monotherapy Only)"
subtitle: "Checking cell sizes across imputations"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: html
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
source("functions.R")
setup_analysis(seed = 2025)

library(knitr)
library(tidyr)
library(dplyr)

# Initialize logging
log_file <- init_log("cell_count_analysis")

# Configuration
MIN_N_PER_CELL <- 5    # Minimum observations per interaction cell
TREATMENT_APPROACH <- "hierarchical"  # "hierarchical" or "collapsed"

log_message("======================================")
log_message("Cell Count Analysis")
log_message("======================================")
log_message(paste0("Analysis started at: ", Sys.time()))
```

## Load Imputed Datasets

```{r load-data}
# Load imputed datasets from reanalysis-2
imputed_file <- file.path(reanalysis_data_dir, "imputed_datasets.rds")

if (!file.exists(imputed_file)) {
  stop("Imputed datasets not found. Run reanalysis-2-multiple_imputation.qmd first.")
}

imputed_datasets <- readRDS(imputed_file)
n_imputations <- length(imputed_datasets)

log_message(paste0("Loaded ", n_imputations, " imputed datasets"))
```

## Prepare Treatment Variables

```{r prepare-treatment}
# Create treatment variables and restrict to monotherapy
for (i in 1:n_imputations) {
  imputed_datasets[[i]] <- imputed_datasets[[i]] |>
    mutate(
      # Count treatments per patient
      n_treatments = as.numeric(as.character(other_inject)) + 
                     as.numeric(as.character(anti_VEGF)) + 
                     as.numeric(as.character(focal_laser_flag)) + 
                     as.numeric(as.character(PRP_flag)),
      
      # Create treatment factor with hierarchical assignment
      treatment_type = case_when(
        focal_laser_flag == 1 ~ "focal_laser",  # Highest priority
        anti_VEGF == 1 ~ "anti_VEGF",
        PRP_flag == 1 ~ "PRP",
        other_inject == 1 ~ "other_inject",
        TRUE ~ "none"
      ),
      
      treatment_type = factor(treatment_type,
                              levels = c("none", "other_inject", "focal_laser", "PRP", "anti_VEGF")),
      
      # Ensure DR severity is properly factored
      dr_severity = factor(dr_severity, levels = c("No_DR", "NPDR", "PDR")),
      
      # Ensure lapse is properly coded
      ever_lapse_binary = factor(ever_lapse_binary, levels = c(0, 1),
                                 labels = c("No_Lapse", "Lapsed"))
    ) |>
    # RESTRICT TO MONOTHERAPY PATIENTS
    filter(n_treatments <= 1)
  
  log_message(paste0("Imputation ", i, ": ", nrow(imputed_datasets[[i]]), 
                     " patients after restricting to monotherapy"))
}
```

## Average Cell Sizes Across Imputations

```{r compute-cell-counts}
# Compute cell counts for each imputation
all_cell_counts <- list()

for (i in 1:n_imputations) {
  cell_counts <- imputed_datasets[[i]] |>
    count(ever_lapse_binary, dr_severity, treatment_type) |>
    mutate(imputation = i)
  
  all_cell_counts[[i]] <- cell_counts
}

# Combine all imputations
combined_counts <- bind_rows(all_cell_counts)

# Calculate average counts across imputations
average_counts <- combined_counts |>
  group_by(ever_lapse_binary, dr_severity, treatment_type) |>
  summarise(
    mean_n = mean(n),
    sd_n = sd(n),
    min_n = min(n),
    max_n = max(n),
    .groups = "drop"
  ) |>
  arrange(ever_lapse_binary, dr_severity, treatment_type)

# Display average cell counts in wide format
average_table <- average_counts |>
  select(ever_lapse_binary, dr_severity, treatment_type, mean_n) |>
  pivot_wider(
    names_from = treatment_type,
    values_from = mean_n,
    values_fill = 0
  ) |>
  arrange(ever_lapse_binary, dr_severity)

kable(average_table,
      caption = paste0("Average cell sizes across ", n_imputations, " imputations (monotherapy only)"),
      digits = 1)

# Identify small cells
small_cells <- average_counts |> 
  filter(mean_n < MIN_N_PER_CELL)

if (nrow(small_cells) > 0) {
  log_message(paste0("WARNING: ", nrow(small_cells), 
                    " cells have average count < ", MIN_N_PER_CELL))
  
  kable(small_cells |> 
        select(ever_lapse_binary, dr_severity, treatment_type, 
               mean_n, min_n, max_n) |>
        arrange(mean_n),
        caption = paste0("Cells with average count < ", MIN_N_PER_CELL),
        digits = 1)
}

# Summary statistics
total_cells <- nrow(average_counts)
sparse_cells <- sum(average_counts$mean_n < 30)
very_sparse_cells <- sum(average_counts$mean_n < 10)

cat("\n### Cell Count Summary\n")
cat("- Total cells in 3-way interaction:", total_cells, "\n")
cat("- Cells with average n < 30:", sparse_cells, 
    "(", round(100*sparse_cells/total_cells, 1), "%)\n")
cat("- Cells with average n < 10:", very_sparse_cells,
    "(", round(100*very_sparse_cells/total_cells, 1), "%)\n")
cat("- Smallest average cell size:", round(min(average_counts$mean_n), 1), "\n")
cat("- Largest average cell size:", round(max(average_counts$mean_n), 1), "\n")
```

## Cell Distribution Details

```{r detailed-distribution}
# Show distribution with standard deviations
detailed_table <- average_counts |>
  mutate(
    mean_sd = paste0(round(mean_n, 1), " (", round(sd_n, 1), ")"),
    range = paste0("[", round(min_n), "-", round(max_n), "]")
  ) |>
  select(ever_lapse_binary, dr_severity, treatment_type, mean_sd, range) |>
  arrange(ever_lapse_binary, dr_severity, treatment_type)

kable(detailed_table,
      caption = "Cell sizes: Mean (SD) and [Min-Max] range across imputations",
      col.names = c("Lapse", "DR Severity", "Treatment", "Mean (SD)", "Range"))
```

```{r session-info}
# Close log
close_log(log_file)

sessionInfo()
```