---
title: "Reanalysis Step 4: Main Effects Outcome Analysis"
subtitle: "Analyzing lapse effect without interactions"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 3
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
setup_analysis(seed = 2025)

library(mice)
library(survey)
library(broom)
library(marginaleffects)

# ANALYSIS MODE: Use same as imputation
analysis_mode <- "final"  # Should match imputation mode

# Check for required files
required_files <- c(
  "imputed_datasets.rds",
  "twang_weights.rds",
  "variable_lists.rds"
)

missing_files <- c()
for (file in required_files) {
  if (!file.exists(file.path(reanalysis_data_dir, file))) {
    missing_files <- c(missing_files, file)
  }
}

if (length(missing_files) > 0) {
  stop(paste("Required files not found. Please run previous steps first:\n",
             "- Step 2 (Multiple Imputation) creates: imputed_datasets.rds\n",
             "- Step 3 (Propensity Scores) creates: twang_weights.rds\n",
             "Missing files:", paste(missing_files, collapse = ", ")))
}

# Load data and weights
imputed_datasets <- readRDS(file.path(reanalysis_data_dir, "imputed_datasets.rds"))
twang_weights <- readRDS(file.path(reanalysis_data_dir, "twang_weights.rds"))

# Get number of imputations from saved data
n_imputations <- length(imputed_datasets)

# Load variable lists
variable_lists <- readRDS(file.path(reanalysis_data_dir, "variable_lists.rds"))
```

**Analysis Parameters:**
- Mode: `r analysis_mode`
- Number of imputations: `r n_imputations`
- Estimand: ATT (Average Treatment Effect in the Treated)
- Model: Main effects only (no interactions)

## Data Overview

```{r data-overview}
# First imputed dataset summary
first_imp <- imputed_datasets[[1]]

# Add weights to the first dataset
first_imp$weights <- twang_weights[[1]]

# Sample sizes
n_total <- nrow(first_imp)
n_lapsed <- sum(first_imp$ever_lapse_binary == 1)
n_control <- sum(first_imp$ever_lapse_binary == 0)

# Outcome summary
n_vi <- sum(first_imp$outcome_va_vi_binary == 1)
prop_vi <- mean(first_imp$outcome_va_vi_binary == 1) * 100

summary_df <- data.frame(
  Measure = c("Total patients", "Lapsed", "Not lapsed", 
              "VI/Blind outcomes", "VI/Blind proportion"),
  Value = c(n_total, n_lapsed, n_control, n_vi, paste0(round(prop_vi, 1), "%"))
)

kable(summary_df)
```

### Variable Distributions in First Imputed Dataset

**DR Severity:**
```{r dr-severity-dist}
dr_table <- table(first_imp$dr_severity)
dr_df <- data.frame(
  Category = names(dr_table),
  Count = as.numeric(dr_table),
  Percentage = paste0(round(100 * as.numeric(dr_table) / sum(dr_table), 1), "%")
)
kable(dr_df, align = c('l', 'r', 'r'))
```

**Treatment Status:**
```{r treatment-dist}
treatment_table <- table(first_imp$any_treatment)
treatment_df <- data.frame(
  Treatment = c("No Treatment", "Treatment"),
  Count = as.numeric(treatment_table),
  Percentage = paste0(round(100 * as.numeric(treatment_table) / sum(treatment_table), 1), "%")
)
kable(treatment_df, align = c('l', 'r', 'r'))
```

**Lapse Status:**
```{r lapse-dist}
lapse_table <- table(first_imp$ever_lapse_binary)
lapse_df <- data.frame(
  Lapse_Status = c("No Lapse", "Lapsed"),
  Count = as.numeric(lapse_table),
  Percentage = paste0(round(100 * as.numeric(lapse_table) / sum(lapse_table), 1), "%")
)
kable(lapse_df, align = c('l', 'r', 'r'))
```

## Define Model Formula (Main Effects Only)

```{r define-formula}
# Base covariates (same as interaction model)
base_covariates <- c(
  "baseline_VA_logMAR",
  "gender_cat",
  "race_ethnic_cat", 
  "insurance_cat",
  "age_cat",
  "CCI",
  "DCSI",
  "glaucoma_bef_hitplus_cat",
  "otherretina_bef_hitplus_cat",
  "catsurg_before_hitplus_cat"
)

# Main effects formula - NO INTERACTIONS
# Lapse is the exposure, DR severity and treatment are covariates
main_effects_formula <- as.formula(paste(
  "outcome_va_vi_binary ~ ever_lapse_binary + dr_severity + any_treatment +",
  paste(base_covariates, collapse = " + ")
))
```

### Model Specification

**Formula:**
```{r show-formula}
print(main_effects_formula)
```

**Model Structure:**
- Main effect of interest: `ever_lapse_binary`
- Adjustment variables: DR severity, treatment status, and baseline covariates
- No interaction terms

## Fit Models to Each Imputed Dataset

```{r fit-models}
# Store fitted models and extracted coefficients
fitted_models <- list()
model_summaries <- list()

for (i in 1:n_imputations) {
  # Get dataset and weights
  imp_data <- imputed_datasets[[i]]
  imp_data$weights <- twang_weights[[i]]
  
  # Create survey design object for weighted analysis
  design <- svydesign(
    ids = ~ e_mrn_deidentified,
    weights = ~ weights,
    data = imp_data
  )
  
  # Fit weighted logistic regression - MAIN EFFECTS ONLY
  model <- svyglm(
    main_effects_formula,
    design = design,
    family = quasibinomial()
  )
  
  # Store model
  fitted_models[[i]] <- model
  
  # Extract and store summary
  model_summaries[[i]] <- tidy(model, conf.int = TRUE)
}

# Show first model summary as example
cat("Example model summary (Imputation 1):\n")
kable(model_summaries[[1]] |> 
      select(term, estimate, std.error, p.value) |> 
      head(10))
```

## Pool Results Across Imputations

```{r pool-results}
# Extract coefficient for lapse effect from each imputation
lapse_coefficients <- sapply(model_summaries, function(x) {
  x$estimate[x$term == "ever_lapse_binary"]
})

lapse_ses <- sapply(model_summaries, function(x) {
  x$std.error[x$term == "ever_lapse_binary"]
})

# Pool using Rubin's rules (via mice)
# Create a mira object for pooling
model_list <- lapply(fitted_models, as.mira)
class(model_list) <- c("mira", "list")

# Pool the results
pooled <- pool(model_list)
pooled_results <- summary(pooled, conf.int = TRUE) |> 
  as.data.frame()

# Extract main effect of lapse
lapse_effect <- pooled_results[pooled_results$term == "ever_lapse_binary", ]

# Calculate OR and CI
lapse_effect$OR <- exp(lapse_effect$estimate)
lapse_effect$OR_lower <- exp(lapse_effect$`2.5 %`)
lapse_effect$OR_upper <- exp(lapse_effect$`97.5 %`)

# Format for display
main_effect_summary <- data.frame(
  Effect = "Lapsing from care",
  Log_Odds = round(lapse_effect$estimate, 4),
  SE = round(lapse_effect$std.error, 4),
  OR = round(lapse_effect$OR, 3),
  CI_Lower = round(lapse_effect$OR_lower, 3),
  CI_Upper = round(lapse_effect$OR_upper, 3),
  P_Value = format.pval(lapse_effect$p.value, digits = 4, eps = 0.0001)
)

kable(main_effect_summary, 
      caption = "Main effect of lapsing on vision impairment/blindness")
```

### Pooling Diagnostics

```{r pooling-diagnostics}
# Create diagnostics table
pool_diag <- data.frame(
  Metric = c("Number of imputations", 
             "Number of parameters",
             "Average degrees of freedom",
             "Fraction of missing information (FMI)",
             "Relative efficiency"),
  Value = c(n_imputations,
            nrow(pooled_results),
            round(mean(pooled_results$df), 1),
            round(lapse_effect$fmi, 3),
            round(1 / (1 + lapse_effect$fmi/n_imputations), 4))
)

kable(pool_diag, caption = "Pooling diagnostics for main effect model")
```

## Full Model Results

```{r full-results}
# Format all pooled results
pooled_results$OR <- exp(pooled_results$estimate)
pooled_results$OR_lower <- exp(pooled_results$`2.5 %`)
pooled_results$OR_upper <- exp(pooled_results$`97.5 %`)

# Create clean results table
full_results <- pooled_results |>
  select(term, estimate, std.error, OR, OR_lower, OR_upper, p.value) |>
  mutate(
    estimate = round(estimate, 4),
    std.error = round(std.error, 4),
    OR = round(OR, 3),
    OR_lower = round(OR_lower, 3),
    OR_upper = round(OR_upper, 3),
    p.value = format.pval(p.value, digits = 4, eps = 0.0001)
  ) |>
  rename(
    Variable = term,
    `Log Odds` = estimate,
    SE = std.error,
    `OR (95% CI)` = OR,
    `CI Lower` = OR_lower,
    `CI Upper` = OR_upper,
    `P-value` = p.value
  )

# Display key variables
key_vars <- c("ever_lapse_binary", "dr_severityNPDR", "dr_severityPDR", "any_treatment")
key_results <- full_results[full_results$Variable %in% key_vars, ]

kable(key_results, 
      caption = "Key variables from pooled model")
```

## Average Marginal Effects

```{r marginal-effects}
# Calculate AME for the main effect of lapse
# Use the first few imputations for AME calculation
n_ame_imps <- min(10, n_imputations)  # Use up to 10 imputations for AME

ame_results <- list()
for (i in 1:n_ame_imps) {
  imp_data <- imputed_datasets[[i]]
  imp_data$weights <- twang_weights[[i]]
  
  # Create survey design to properly handle clustering
  design <- svydesign(
    ids = ~ e_mrn_deidentified,  # Cluster on patient ID
    weights = ~ weights,
    data = imp_data
  )
  
  # Calculate AME with survey design
  # Note: marginaleffects handles survey objects appropriately
  ame <- avg_slopes(
    fitted_models[[i]], 
    variables = "ever_lapse_binary",
    newdata = imp_data,  # Use the full dataset
    vcov = ~e_mrn_deidentified,  # Cluster standard errors on patient ID
    wts = imp_data$weights  # Apply propensity score weights
  )
  
  ame_results[[i]] <- data.frame(
    imp = i,
    ame = ame$estimate,
    se = ame$std.error
  )
}

# Combine AME results
ame_combined <- do.call(rbind, ame_results)

# Pool AME estimates using Rubin's rules
pooled_ame <- data.frame(
  Effect = "Average Marginal Effect of Lapse",
  AME = mean(ame_combined$ame),
  SE = sqrt(mean(ame_combined$se^2) + var(ame_combined$ame) * (1 + 1/n_ame_imps)),
  Interpretation = paste0(
    "On average, lapsing from care increases the probability of VI/blindness by ",
    round(mean(ame_combined$ame), 3)
  )
)

kable(pooled_ame |> select(-Interpretation), 
      caption = "Average marginal effect of lapsing",
      digits = 4)

# Display interpretation separately
ame_text <- pooled_ame$Interpretation
```

`r ame_text`

## Predicted Probabilities

```{r predicted-probs}
# Calculate predicted probabilities for different scenarios
# Using the first imputation for illustration
imp_data <- imputed_datasets[[1]]
imp_data$weights <- twang_weights[[1]]

# Create prediction scenarios
scenarios <- expand.grid(
  ever_lapse_binary = c(0, 1),
  dr_severity = c("No_DR", "NPDR", "PDR"),
  any_treatment = c(0, 1)
)

# Set other variables to their weighted means/modes
weighted_means <- svydesign(ids = ~1, weights = ~weights, data = imp_data) |>
  svymean(~baseline_VA_logMAR + age + CCI + DCSI, na.rm = TRUE)

# Get modes for categorical variables
get_mode <- function(x, w) {
  tbl <- xtabs(w ~ x)
  names(tbl)[which.max(tbl)]
}

scenarios$baseline_VA_logMAR <- weighted_means["baseline_VA_logMAR"]
scenarios$age_cat <- get_mode(imp_data$age_cat, imp_data$weights)
scenarios$gender_cat <- get_mode(imp_data$gender_cat, imp_data$weights)
scenarios$race_ethnic_cat <- get_mode(imp_data$race_ethnic_cat, imp_data$weights)
scenarios$insurance_cat <- get_mode(imp_data$insurance_cat, imp_data$weights)
scenarios$CCI <- round(weighted_means["CCI"])
scenarios$DCSI <- round(weighted_means["DCSI"])
scenarios$glaucoma_bef_hitplus_cat <- 0
scenarios$otherretina_bef_hitplus_cat <- 0
scenarios$catsurg_before_hitplus_cat <- 0

# Get predictions
predictions <- predict(fitted_models[[1]], newdata = scenarios, type = "response")

# Format results
pred_table <- scenarios[, c("ever_lapse_binary", "dr_severity", "any_treatment")]
pred_table$Predicted_Prob <- round(predictions, 3)
pred_table$Lapse <- ifelse(pred_table$ever_lapse_binary == 1, "Lapsed", "Not Lapsed")
pred_table$Treatment <- ifelse(pred_table$any_treatment == 1, "Treated", "Not Treated")

# Reshape for better display
library(tidyr)
pred_wide <- pred_table |>
  select(Lapse, dr_severity, Treatment, Predicted_Prob) |>
  pivot_wider(names_from = Lapse, values_from = Predicted_Prob) |>
  arrange(dr_severity, Treatment)

kable(pred_wide, 
      caption = "Predicted probability of VI/blindness by lapse status",
      col.names = c("DR Severity", "Treatment", "Not Lapsed", "Lapsed"))

# Calculate risk differences
pred_wide$Risk_Difference <- pred_wide$Lapsed - pred_wide$`Not Lapsed`
pred_wide$Relative_Risk <- pred_wide$Lapsed / pred_wide$`Not Lapsed`

kable(pred_wide |> select(dr_severity, Treatment, Risk_Difference, Relative_Risk), 
      caption = "Risk differences and relative risks",
      col.names = c("DR Severity", "Treatment", "Risk Difference", "Relative Risk"),
      digits = 3)
```

## Save Results

```{r save-results}
# Save key results for reporting
results_to_save <- list(
  main_effect = main_effect_summary,
  pooled_coefficients = pooled_results,
  full_results = full_results,
  ame_results = pooled_ame,
  predicted_probabilities = pred_wide,
  model_formula = main_effects_formula,
  n_imputations = n_imputations,
  analysis_mode = analysis_mode,
  timestamp = Sys.time()
)

saveRDS(results_to_save, 
        file.path(reanalysis_data_dir, "outcome_analysis_main_effects_results.rds"))

save_location <- file.path(reanalysis_data_dir, "outcome_analysis_main_effects_results.rds")
```

**Results saved to:** `r save_location`
