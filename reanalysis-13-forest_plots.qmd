---
title: "Step 13: Forest Plots - Marginal Effects and PS Methods Comparison"
author: "Analysis Team"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    code-summary: "Show code"
    fig-width: 10
    fig-height: 8
    fig-dpi: 150
    embed-resources: true
    self-contained: true
---

## Overview

This document creates forest plots comparing:
1. Average Marginal Effects (AME) across subgroups from the twang GBM analysis
2. Odds ratios across different propensity score methods

```{r setup}
#| include: false
source("dependencies.R")
source("functions.R")
source("alt_specs.R")
setup_analysis(seed = 2025)

library(ggplot2)
library(knitr)
library(kableExtra)

# Initialize logging
log_file <- init_log("forest_plots")
log_message("Starting forest plot generation")

# Configuration
marginal_effects_dir <- file.path(reanalysis_data_dir, "marginal_effects_cache")
pooled_cache_dir <- file.path(reanalysis_data_dir, "ps_cache", "pooled_results")
plots_dir <- file.path(reanalysis_data_dir, "forest_plots")

if (!dir.exists(plots_dir)) {
  dir.create(plots_dir, recursive = TRUE)
}
```

## Load Data

```{r load-data}
# Load marginal effects results
mfx_results_file <- file.path(marginal_effects_dir, "pooled_mfx_results.rds")
if (file.exists(mfx_results_file)) {
  pooled_mfx <- readRDS(mfx_results_file)
  cat("✓ Loaded marginal effects results\n")
} else {
  cat("✗ Marginal effects results not found. Run reanalysis-13 first.\n")
  pooled_mfx <- list()
}

# Load PS methods pooled results
ps_results_file <- file.path(pooled_cache_dir, "all_pooled_results.rds")
if (file.exists(ps_results_file)) {
  ps_pooled <- readRDS(ps_results_file)
  cat("✓ Loaded PS methods results\n")
} else {
  cat("✗ PS methods results not found. Run reanalysis-10 first.\n")
  ps_pooled <- list()
}
```

## Forest Plot 1: Average Marginal Effects by Subgroup

```{r ame-forest-plot}
#| fig.width: 10
#| fig.height: 8

if (length(pooled_mfx) > 0) {
  # Prepare data for forest plot
  forest_data <- do.call(rbind, lapply(names(pooled_mfx), function(sg_name) {
    res <- pooled_mfx[[sg_name]]
    if (!is.null(res) && res$success) {
      data.frame(
        label = res$name,
        AME = res$ame,
        SE = res$se,
        Lower = res$ci_lower,
        Upper = res$ci_upper,
        p = res$p_value,
        n = res$avg_n,
        group_type = ifelse(sg_name == "overall", "overall", "subgroup"),
        stringsAsFactors = FALSE
      )
    }
  }))
  
  # Define subgroup order for the plot
  subgroup_order <- c(
    "PDR, on PRP only",
    "PDR, on anti-VEGF only", 
    "PDR, any treatment",
    "NPDR, any treatment",
    "NPDR, no treatment",
    "No DR or NPDR, any treatment",
    "No DR or NPDR, no treatment"
  )
  
  # Create the main AME forest plot
  data_subgroups <- forest_data[forest_data$group_type == "subgroup", ]
  data_subgroups$Labels <- factor(data_subgroups$label, levels = subgroup_order)
  
  ame_plot <- ggplot(data_subgroups, aes(x = AME, y = Labels)) +
    geom_vline(xintercept = 0, color = "#be123c", linetype = "solid", size = 0.5) +
    geom_point(size = 3, color = "#2563eb") +
    geom_errorbarh(aes(xmin = Lower, xmax = Upper), height = 0.2, color = "#2563eb") +
    geom_text(
      aes(x = Lower, label = sprintf("%.3f", Lower)), 
      hjust = 1.2, size = 3, color = "black"
    ) +
    geom_text(
      aes(x = Upper, label = sprintf("%.3f", Upper)), 
      hjust = -0.2, size = 3, color = "black"
    ) +
    geom_text(
      aes(x = AME, label = sprintf("%.3f", AME)), 
      vjust = -1, size = 3.5, fontface = "bold", color = "#2563eb"
    ) +
    scale_x_continuous(
      limits = c(min(data_subgroups$Lower) - 0.02, max(data_subgroups$Upper) + 0.02),
      breaks = seq(-0.1, 0.2, by = 0.05)
    ) +
    labs(
      title = "Average Marginal Effects of Lapsing Across Subgroups",
      subtitle = "Twang GBM with IPW - Pooled across 50 imputations",
      x = "Average Marginal Effect (AME)",
      y = "",
      caption = "AME > 0 indicates increased probability of vision impairment with lapsing"
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(size = 10),
      axis.text.y = element_text(size = 11, face = "bold"), 
      axis.title.x = element_text(size = 12, face = "bold", margin = ggplot2::margin(t = 20)),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5, margin = ggplot2::margin(b = 10)),
      plot.subtitle = element_text(size = 11, hjust = 0.5, margin = ggplot2::margin(b = 20)),
      plot.margin = ggplot2::margin(20, 20, 20, 20),
      panel.grid.major.y = element_line(color = "gray90", linetype = "dotted"),
      panel.grid.minor = element_blank(),
      plot.caption = element_text(size = 9, face = "italic", margin = ggplot2::margin(t = 20))
    )
  
  print(ame_plot)
  
  # Save the plot with descriptive filename
  ggsave(file.path(plots_dir, "marginal_effects_subgroups_forest_plot.png"), 
         ame_plot, width = 10, height = 8, dpi = 300, bg = "white")
  
  # Version with overall effect included
  if ("overall" %in% names(pooled_mfx)) {
    all_order <- c("Overall Population", subgroup_order)
    forest_data$Labels <- factor(forest_data$label, levels = all_order)
    forest_data$point_color <- ifelse(forest_data$group_type == "overall", "#dc2626", "#2563eb")
    forest_data$point_size <- ifelse(forest_data$group_type == "overall", 4, 3)
    
    ame_plot_with_overall <- ggplot(forest_data, aes(x = AME, y = Labels)) +
      geom_vline(xintercept = 0, color = "#be123c", linetype = "solid", size = 0.5) +
      geom_hline(yintercept = length(subgroup_order) + 0.5, 
                 color = "gray50", linetype = "dashed", alpha = 0.5) +
      geom_point(aes(size = point_size, color = point_color)) +
      geom_errorbarh(aes(xmin = Lower, xmax = Upper, color = point_color), height = 0.2) +
      geom_text(
        aes(x = AME, label = sprintf("%.3f", AME), color = point_color), 
        vjust = -1, size = 3.5, fontface = "bold"
      ) +
      scale_color_identity() +
      scale_size_identity() +
      scale_x_continuous(
        limits = c(min(forest_data$Lower) - 0.02, max(forest_data$Upper) + 0.02),
        breaks = seq(-0.1, 0.2, by = 0.05)
      ) +
      labs(
        title = "Average Marginal Effects of Lapsing",
        subtitle = "Overall and Subgroup-Specific Effects",
        x = "Average Marginal Effect (AME)",
        y = "",
        caption = "Red: Overall effect | Blue: Subgroup effects"
      ) +
      theme_minimal() +
      theme(
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 11, face = "bold"), 
        axis.title.x = element_text(size = 12, face = "bold", margin = ggplot2::margin(t = 20)),
        plot.title = element_text(size = 14, face = "bold", hjust = 0.5, margin = ggplot2::margin(b = 10)),
        plot.subtitle = element_text(size = 11, hjust = 0.5, margin = ggplot2::margin(b = 20)),
        plot.margin = ggplot2::margin(20, 20, 20, 20),
        panel.grid.major.y = element_line(color = "gray90", linetype = "dotted"),
        panel.grid.minor = element_blank(),
        plot.caption = element_text(size = 9, face = "italic", margin = ggplot2::margin(t = 20))
      )
    
    print(ame_plot_with_overall)
    
    ggsave(file.path(plots_dir, "marginal_effects_overall_forest_plot.png"), 
           ame_plot_with_overall, width = 10, height = 8.5, dpi = 300, bg = "white")
  }
  
  # Save data for reference
  write.csv(forest_data, file.path(plots_dir, "ame_forest_plot_data.csv"), row.names = FALSE)
  log_message("AME forest plots created")
  
} else {
  cat("No marginal effects results available for plotting\n")
}
```

## Forest Plot 2: Propensity Score Methods Comparison

```{r ps-methods-forest-plot}
#| fig.width: 10
#| fig.height: 8

if (length(ps_pooled) > 0) {
  # Prepare data for PS methods forest plot
  ps_forest_data <- do.call(rbind, lapply(names(ps_pooled), function(method) {
    res <- ps_pooled[[method]]
    if (!is.null(res) && res$success) {
      # Clean up method names for display
      method_label <- gsub("_", " ", method)
      method_label <- gsub("nearest ", "Nearest ", method_label)
      method_label <- gsub("subclass glm", "Subclassification", method_label)
      method_label <- gsub("cbps", "CBPS", method_label)
      method_label <- gsub("entropy", "Entropy Balancing", method_label)
      method_label <- gsub("bart", "BART", method_label)
      method_label <- gsub("twang gbm", "Twang GBM (IPW)", method_label)
      method_label <- gsub("glm", "GLM", method_label)
      method_label <- gsub("gam", "GAM", method_label)
      method_label <- gsub("gbm", "GBM", method_label)
      method_label <- gsub("lasso", "LASSO", method_label)
      method_label <- gsub("rpart", "RPART", method_label)
      method_label <- gsub("mahalanobis", "Mahalanobis", method_label)
      
      data.frame(
        method = method,
        label = method_label,
        OR = res$or,
        Lower = res$or_ci_lower,
        Upper = res$or_ci_upper,
        p = res$p_value,
        n_imp = res$n_imputations,
        highlight = ifelse(method == "twang_gbm", TRUE, FALSE),
        stringsAsFactors = FALSE
      )
    }
  }))
  
  # Order by OR value
  ps_forest_data <- ps_forest_data[order(ps_forest_data$OR), ]
  ps_forest_data$label <- factor(ps_forest_data$label, levels = ps_forest_data$label)
  ps_forest_data$color <- ifelse(ps_forest_data$highlight, "#dc2626", "#2563eb")
  ps_forest_data$size <- ifelse(ps_forest_data$highlight, 4, 3)
  
  ps_plot <- ggplot(ps_forest_data, aes(x = OR, y = label)) +
    geom_vline(xintercept = 1, color = "#be123c", linetype = "solid", size = 0.5) +
    geom_point(aes(size = size, color = color)) +
    geom_errorbarh(aes(xmin = Lower, xmax = Upper, color = color), height = 0.2) +
    geom_text(
      aes(x = OR, label = sprintf("%.2f", OR), color = color), 
      vjust = -1, size = 3.5, fontface = "bold"
    ) +
    scale_color_identity() +
    scale_size_identity() +
    scale_x_continuous(
      trans = "log10",
      breaks = c(0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5),
      labels = c("0.8", "0.9", "1.0", "1.1", "1.2", "1.3", "1.4", "1.5")
    ) +
    labs(
      title = "Comparison of Propensity Score Methods",
      subtitle = "Odds Ratios for Vision Impairment (Lapse vs No Lapse)",
      x = "Odds Ratio (log scale)",
      y = "",
      caption = "OR > 1 indicates increased odds of vision impairment with lapsing\nRed: Primary method (Twang GBM) | Blue: Alternative methods"
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(size = 10),
      axis.text.y = element_text(size = 10), 
      axis.title.x = element_text(size = 12, face = "bold", margin = ggplot2::margin(t = 20)),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5, margin = ggplot2::margin(b = 10)),
      plot.subtitle = element_text(size = 11, hjust = 0.5, margin = ggplot2::margin(b = 20)),
      plot.margin = ggplot2::margin(20, 20, 20, 20),
      panel.grid.major.y = element_line(color = "gray90", linetype = "dotted"),
      panel.grid.minor = element_blank(),
      plot.caption = element_text(size = 9, face = "italic", margin = ggplot2::margin(t = 20))
    )
  
  print(ps_plot)
  
  # Save the plot
  ggsave(file.path(plots_dir, "forest_plot_ps_methods.png"), 
         ps_plot, width = 10, height = 8, dpi = 300, bg = "white")
  
  # Save data for reference
  write.csv(ps_forest_data, file.path(plots_dir, "ps_methods_forest_plot_data.csv"), row.names = FALSE)
  log_message("PS methods forest plot created")
  
} else {
  cat("No PS methods results available for plotting\n")
}
```

## Combined Forest Plot

```{r combined-plot}
#| fig.width: 12
#| fig.height: 10

# Create a combined plot if both datasets are available
if (length(pooled_mfx) > 0 && length(ps_pooled) > 0) {
  
  library(gridExtra)
  library(grid)
  
  # Create title and subtitle
  title_grob <- textGrob("Comparative Forest Plots: Marginal Effects and PS Methods",
                         gp = gpar(fontsize = 16, fontface = "bold"))
  subtitle_grob <- textGrob("Lapsing Effect on Vision Impairment",
                           gp = gpar(fontsize = 12))
  
  # Arrange plots
  combined_plot <- arrangeGrob(
    title_grob,
    subtitle_grob,
    ame_plot,
    ps_plot,
    ncol = 1,
    heights = c(0.05, 0.03, 0.46, 0.46)
  )
  
  # Display
  grid.newpage()
  grid.draw(combined_plot)
  
  # Save combined plot
  ggsave(file.path(plots_dir, "forest_plot_combined.png"),
         combined_plot, width = 12, height = 14, dpi = 300, bg = "white")
  
  log_message("Combined forest plot created")
}
```

## Summary Statistics

```{r summary-stats}
# Summary table of AME results
if (length(pooled_mfx) > 0) {
  cat("\n", paste(rep("=", 60), collapse = ""), "\n")
  cat("MARGINAL EFFECTS SUMMARY\n")
  cat(paste(rep("=", 60), collapse = ""), "\n\n")
  
  ame_summary <- do.call(rbind, lapply(names(pooled_mfx), function(sg_name) {
    res <- pooled_mfx[[sg_name]]
    if (!is.null(res) && res$success) {
      data.frame(
        Subgroup = res$name,
        AME = sprintf("%.4f", res$ame),
        `95% CI` = sprintf("(%.4f, %.4f)", res$ci_lower, res$ci_upper),
        `P-value` = ifelse(res$p_value < 0.001, "<0.001", sprintf("%.3f", res$p_value)),
        `Interpretation` = ifelse(res$ame > 0, 
                                 sprintf("%.1f%% increased risk", res$ame * 100),
                                 sprintf("%.1f%% decreased risk", abs(res$ame) * 100)),
        stringsAsFactors = FALSE,
        check.names = FALSE
      )
    }
  }))
  
  kable(ame_summary, 
        caption = "Average Marginal Effects Summary",
        align = c("l", "r", "c", "r", "l"))
}

# Summary table of PS methods
if (length(ps_pooled) > 0) {
  cat("\n", paste(rep("=", 60), collapse = ""), "\n")
  cat("PROPENSITY SCORE METHODS SUMMARY\n")
  cat(paste(rep("=", 60), collapse = ""), "\n\n")
  
  ps_summary <- ps_forest_data[, c("label", "OR", "Lower", "Upper", "p")]
  names(ps_summary) <- c("Method", "OR", "CI Lower", "CI Upper", "P-value")
  ps_summary$`95% CI` <- sprintf("(%.2f, %.2f)", ps_summary$`CI Lower`, ps_summary$`CI Upper`)
  ps_summary$OR <- sprintf("%.2f", ps_summary$OR)
  ps_summary$`P-value` <- ifelse(ps_summary$`P-value` < 0.001, "<0.001", 
                                 sprintf("%.3f", ps_summary$`P-value`))
  ps_summary <- ps_summary[, c("Method", "OR", "95% CI", "P-value")]
  
  kable(ps_summary,
        caption = "Propensity Score Methods Comparison",
        align = c("l", "r", "c", "r"))
  
  # Find range and median
  or_values <- ps_forest_data$OR
  cat(sprintf("\nOR Range: %.2f to %.2f\n", min(or_values), max(or_values)))
  cat(sprintf("Median OR: %.2f\n", median(or_values)))
  cat(sprintf("Twang GBM OR: %.2f\n", 
              ps_forest_data$OR[ps_forest_data$method == "twang_gbm"]))
}
```

## Export All Plots

```{r export}
cat("\n", paste(rep("=", 60), collapse = ""), "\n")
cat("EXPORTED FILES\n")
cat(paste(rep("=", 60), collapse = ""), "\n\n")

cat("Forest plots saved to:", plots_dir, "\n\n")
cat("Files created:\n")
cat("  1. marginal_effects_subgroups_forest_plot.png - AME by subgroup\n")
cat("  2. marginal_effects_overall_forest_plot.png - AME including overall effect\n")
cat("  3. forest_plot_ps_methods.png - PS methods comparison\n")
cat("  4. forest_plot_combined.png - Combined plots\n")
cat("  5. ame_forest_plot_data.csv - AME plot data\n")
cat("  6. ps_methods_forest_plot_data.csv - PS methods plot data\n")

log_message("All forest plots exported successfully")
```

## Session Info

```{r session-info}
log_message("Forest plot generation complete")
finalize_log(success = TRUE)
sessionInfo()
```