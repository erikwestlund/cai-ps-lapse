---
title: "Reanalysis Step 8: Patient-Level Table 1"
subtitle: "Comparing Original, Complete Cases, and Imputed Data at Patient Level (Best Eye)"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: html
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
source("functions.R")
source("settings.R")
setup_analysis(seed = 2025)

library(tableone)
library(knitr)
library(dplyr)
library(tidyr)

# Initialize logging
log_file <- init_log("patient_level_table1")
```

## Load Data from Four Sources

```{r load-data}
# 1. Load original data (from analysis.Rmd)
data_path <- file.path(s_root, "Gina's Project/df_Final_240909.csv")
original_data <- load_and_prepare_data(data_path)
original_complete <- apply_exclusions(original_data)  # Remove missing CCI/DCSI

# Create dr_severity for original data from No_DR/NPDR/PDR
original_complete <- original_complete |>
  mutate(
    dr_severity = case_when(
      No_DR == TRUE ~ "No_DR",
      NPDR %in% c("Mild", "Moderate", "Severe") ~ "NPDR",
      PDR == "Present" ~ "PDR",
      TRUE ~ NA_character_
    ),
    dr_severity = factor(dr_severity, levels = c("No_DR", "NPDR", "PDR"))
  )

# Filter to patient level - best eye (lowest outcome_VA_logMAR)
original_complete <- original_complete |>
  arrange(outcome_VA_logMAR) |>
  group_by(e_mrn_deidentified) |>
  slice(1) |>
  ungroup()

log_message(paste0("Original data after exclusions (patient-level): ", nrow(original_complete), " patients"))

# 2. Load full data for imputation (contains both submitted and excluded)
imputation_data_file <- file.path(reanalysis_data_dir, "df_for_imputation.rds")
if (!file.exists(imputation_data_file)) {
  stop("Imputation data not found. Run reanalysis-1-data_preparation.qmd first.")
}
imputation_data <- readRDS(imputation_data_file)

# Filter to patient level - best eye (lowest outcome_VA_logMAR)
imputation_data <- imputation_data |>
  arrange(outcome_VA_logMAR) |>
  group_by(e_mrn_deidentified) |>
  slice(1) |>
  ungroup()

# Split into submitted and excluded based on cohort_id
submitted_data <- imputation_data[imputation_data$cohort_id == "submitted", ]
excluded_data <- imputation_data[imputation_data$cohort_id == "excluded", ]

log_message(paste0("Submitted (included) data: ", nrow(submitted_data), " patients"))
log_message(paste0("Excluded data: ", nrow(excluded_data), " patients"))

# 3. Load imputed datasets (reanalysis-2)
imputed_file <- file.path(reanalysis_data_dir, "imputed_datasets.rds")
if (!file.exists(imputed_file)) {
  stop("Imputed datasets not found. Run reanalysis-2-multiple_imputation.qmd first.")
}
imputed_datasets <- readRDS(imputed_file)
n_imputations <- length(imputed_datasets)

# Filter each imputed dataset to patient level - best eye
for (i in 1:n_imputations) {
  imputed_datasets[[i]] <- imputed_datasets[[i]] |>
    arrange(outcome_VA_logMAR) |>
    group_by(e_mrn_deidentified) |>
    slice(1) |>
    ungroup()
}

log_message(paste0("Loaded ", n_imputations, " imputed datasets (patient-level)"))
```

## Create Comparison Table

```{r prepare-variables}
# Define variables for Table 1
# Note: Original data doesn't have dr_severity
vars_continuous <- c("age", "baseline_VA_logMAR", "CCI", "DCSI")

# Variables in original data (with proper capitalization)
vars_categorical_original <- c("gender_cat", "race_ethnic_cat", "insurance_cat", "age_cat",
                               "dr_severity", "ever_lapse_binary", 
                               "glaucoma_bef_hitplus_cat", "otherretina_bef_hitplus_cat",
                               "catsurg_before_hitplus_cat",
                               "anti_VEGF", "PRP_flag", "focal_laser_flag", "other_inject",
                               "outcome_va_vi_binary")

# Additional variables (none now that dr_severity is in both)
vars_categorical_new_only <- c()

# All categorical variables for new data
vars_categorical_new <- c("gender_cat", "race_ethnic_cat", "insurance_cat", "age_cat",
                          "dr_severity", "ever_lapse_binary", 
                          "glaucoma_bef_hitplus_cat", "otherretina_bef_hitplus_cat",
                          "catsurg_before_hitplus_cat",
                          "anti_VEGF", "PRP_flag", "focal_laser_flag", "other_inject",
                          "outcome_va_vi_binary")

# Function to compute summary statistics for continuous variables
summarize_continuous <- function(data, var) {
  values <- data[[var]]
  values <- values[!is.na(values)]
  if (length(values) == 0) {
    return(data.frame(
      variable = var,
      mean = NA,
      sd = NA,
      median = NA,
      q25 = NA,
      q75 = NA,
      n_missing = nrow(data),
      pct_missing = 100
    ))
  }
  
  data.frame(
    variable = var,
    mean = mean(values, na.rm = TRUE),
    sd = sd(values, na.rm = TRUE),
    median = median(values, na.rm = TRUE),
    q25 = quantile(values, 0.25, na.rm = TRUE),
    q75 = quantile(values, 0.75, na.rm = TRUE),
    n_missing = sum(is.na(data[[var]])),
    pct_missing = 100 * sum(is.na(data[[var]])) / nrow(data)
  )
}

# Function to compute summary statistics for categorical variables
summarize_categorical <- function(data, var) {
  # Check if variable exists in data
  if (!(var %in% names(data))) {
    return(data.frame(
      variable = var,
      n = NA,
      pct = NA,
      n_missing = NA,
      pct_missing = NA
    ))
  }
  
  # Get table including NA
  tbl <- table(data[[var]], useNA = "no")
  
  # Handle case where all values are NA or empty
  if (length(tbl) == 0) {
    return(data.frame(
      variable = var,
      n = 0,
      pct = NA,
      n_missing = nrow(data),
      pct_missing = 100
    ))
  }
  
  # Calculate proportions
  props <- prop.table(tbl)
  
  # Create data frame with results
  levels_df <- data.frame(
    variable = paste0(var, "_", names(tbl)),
    n = as.vector(tbl),
    pct = 100 * as.vector(props),
    stringsAsFactors = FALSE
  )
  
  # Add missing info
  n_missing <- sum(is.na(data[[var]]))
  levels_df$n_missing <- n_missing
  levels_df$pct_missing <- 100 * n_missing / nrow(data)
  
  levels_df
}

# Process each dataset
process_dataset <- function(data, name, categorical_vars = NULL) {
  # Use provided categorical vars or default to new vars
  if (is.null(categorical_vars)) {
    categorical_vars <- vars_categorical_new
  }
  
  # Continuous variables
  cont_summaries <- do.call(rbind, lapply(vars_continuous, function(v) {
    if (v %in% names(data)) {
      summarize_continuous(data, v)
    } else {
      data.frame(variable = v, mean = NA, sd = NA, median = NA, 
                 q25 = NA, q75 = NA, n_missing = NA, pct_missing = NA)
    }
  }))
  
  # Categorical variables - filter out variables that don't exist
  cat_summaries_list <- lapply(categorical_vars, function(v) {
    if (v %in% names(data)) {
      summarize_categorical(data, v)
    } else {
      NULL
    }
  })
  
  # Remove NULL entries and combine
  cat_summaries_list <- cat_summaries_list[!sapply(cat_summaries_list, is.null)]
  
  if (length(cat_summaries_list) > 0) {
    cat_summaries <- do.call(rbind, cat_summaries_list)
  } else {
    cat_summaries <- data.frame(variable = character(), n = numeric(), 
                                pct = numeric(), n_missing = numeric(), 
                                pct_missing = numeric())
  }
  
  list(continuous = cont_summaries, categorical = cat_summaries, dataset = name)
}
```

```{r create-table}
# Process original data (with original variable names)
original_summary <- process_dataset(original_complete, "Original", vars_categorical_original)
original_summary$categorical$variable_std <- original_summary$categorical$variable

# Process submitted (included) data
submitted_summary <- process_dataset(submitted_data, "Submitted", vars_categorical_new)
submitted_summary$categorical$variable_std <- submitted_summary$categorical$variable

# Process excluded data
excluded_summary <- process_dataset(excluded_data, "Excluded", vars_categorical_new)
excluded_summary$categorical$variable_std <- excluded_summary$categorical$variable

# Process imputed data (average across imputations)
# For imputed data, we need to average across all imputations
imputed_summaries <- lapply(1:n_imputations, function(i) {
  process_dataset(imputed_datasets[[i]], paste0("Imputation_", i))
})

# Average the imputed results
average_imputed_continuous <- do.call(rbind, lapply(vars_continuous, function(v) {
  # Extract values for this variable across all imputations
  imp_values <- lapply(imputed_summaries, function(s) {
    s$continuous[s$continuous$variable == v, ]
  })
  
  # Average the statistics
  if (nrow(imp_values[[1]]) > 0) {
    data.frame(
      variable = v,
      mean = mean(sapply(imp_values, function(x) x$mean), na.rm = TRUE),
      sd = mean(sapply(imp_values, function(x) x$sd), na.rm = TRUE),
      median = mean(sapply(imp_values, function(x) x$median), na.rm = TRUE),
      q25 = mean(sapply(imp_values, function(x) x$q25), na.rm = TRUE),
      q75 = mean(sapply(imp_values, function(x) x$q75), na.rm = TRUE),
      n_missing = 0,  # No missing in imputed data
      pct_missing = 0
    )
  } else {
    data.frame(variable = v, mean = NA, sd = NA, median = NA, 
               q25 = NA, q75 = NA, n_missing = NA, pct_missing = NA)
  }
}))

# For categorical variables, average the percentages
all_cat_vars <- unique(unlist(lapply(imputed_summaries, function(s) s$categorical$variable)))
average_imputed_categorical <- do.call(rbind, lapply(all_cat_vars, function(v) {
  # Extract values for this variable level across all imputations
  imp_values <- lapply(imputed_summaries, function(s) {
    s$categorical[s$categorical$variable == v, ]
  })
  
  # Remove empty results
  imp_values <- imp_values[sapply(imp_values, nrow) > 0]
  
  if (length(imp_values) > 0) {
    data.frame(
      variable = v,
      n = mean(sapply(imp_values, function(x) x$n), na.rm = TRUE),
      pct = mean(sapply(imp_values, function(x) x$pct), na.rm = TRUE),
      n_missing = 0,
      pct_missing = 0
    )
  } else {
    data.frame(variable = v, n = NA, pct = NA, n_missing = NA, pct_missing = NA)
  }
}))

# Add variable_std column to average_imputed_categorical for consistency
average_imputed_categorical$variable_std <- average_imputed_categorical$variable

imputed_summary <- list(
  continuous = average_imputed_continuous,
  categorical = average_imputed_categorical,
  dataset = "Imputed (Average)"
)
```

```{r display-table}
# Create formatted table for continuous variables
format_continuous_table <- function(original, submitted, excluded, imputed) {
  vars <- unique(c(original$variable, submitted$variable, excluded$variable, imputed$variable))
  
  table_df <- data.frame(
    Variable = vars,
    Original = NA,
    Submitted = NA,
    Excluded = NA,
    Imputed = NA,
    stringsAsFactors = FALSE
  )
  
  for (i in 1:length(vars)) {
    v <- vars[i]
    
    # Original
    orig_row <- original[original$variable == v, ]
    if (nrow(orig_row) > 0 && !is.na(orig_row$mean)) {
      table_df$Original[i] <- sprintf("%.2f (%.2f)", orig_row$mean, orig_row$sd)
    }
    
    # Submitted
    sub_row <- submitted[submitted$variable == v, ]
    if (nrow(sub_row) > 0 && !is.na(sub_row$mean)) {
      table_df$Submitted[i] <- sprintf("%.2f (%.2f)", sub_row$mean, sub_row$sd)
    }
    
    # Excluded
    exc_row <- excluded[excluded$variable == v, ]
    if (nrow(exc_row) > 0 && !is.na(exc_row$mean)) {
      table_df$Excluded[i] <- sprintf("%.2f (%.2f)", exc_row$mean, exc_row$sd)
    }
    
    # Imputed
    imp_row <- imputed[imputed$variable == v, ]
    if (nrow(imp_row) > 0 && !is.na(imp_row$mean)) {
      table_df$Imputed[i] <- sprintf("%.2f (%.2f)", imp_row$mean, imp_row$sd)
    }
  }
  
  table_df
}

# Create formatted table for categorical variables
format_categorical_table <- function(original, submitted, excluded, imputed) {
  # Get unique base variable names (without the level suffixes)
  get_base_var <- function(x) sub("_[^_]+$", "", x)
  
  # Collect all variables
  all_vars <- unique(c(original$variable, submitted$variable, excluded$variable, imputed$variable))
  
  # For glaucoma and otherretina, we need to handle different naming conventions
  # Original has _FALSE/_TRUE, new data has _0/_1
  standardize_var <- function(v) {
    if (grepl("glaucoma_bef_hitplus_cat_FALSE", v)) return("glaucoma_bef_hitplus_cat_0")
    if (grepl("glaucoma_bef_hitplus_cat_TRUE", v)) return("glaucoma_bef_hitplus_cat_1")
    if (grepl("otherretina_bef_hitplus_cat_FALSE", v)) return("otherretina_bef_hitplus_cat_0")
    if (grepl("otherretina_bef_hitplus_cat_TRUE", v)) return("otherretina_bef_hitplus_cat_1")
    return(v)
  }
  
  # Standardize variable names
  original$variable_std <- sapply(original$variable, standardize_var)
  submitted$variable_std <- sapply(submitted$variable, standardize_var)
  excluded$variable_std <- sapply(excluded$variable, standardize_var)
  imputed$variable_std <- sapply(imputed$variable, standardize_var)
  
  # Get unique standardized variables
  vars <- unique(c(original$variable_std, submitted$variable_std, 
                   excluded$variable_std, imputed$variable_std))
  
  # Remove duplicates and unwanted rows
  vars <- vars[!grepl("^outcome_va_vi_binary$|^ever_lapse_binary$", vars)]
  
  table_df <- data.frame(
    Variable = vars,
    Original = NA,
    Submitted = NA,
    Excluded = NA,
    Imputed = NA,
    stringsAsFactors = FALSE
  )
  
  for (i in 1:length(vars)) {
    v <- vars[i]
    
    # Original
    orig_row <- original[original$variable_std == v, ]
    if (nrow(orig_row) > 0 && !is.na(orig_row$n)) {
      table_df$Original[i] <- sprintf("%.0f (%.1f%%)", orig_row$n, orig_row$pct)
    }
    
    # Submitted
    sub_row <- submitted[submitted$variable_std == v, ]
    if (nrow(sub_row) > 0 && !is.na(sub_row$n)) {
      table_df$Submitted[i] <- sprintf("%.0f (%.1f%%)", sub_row$n, sub_row$pct)
    }
    
    # Excluded
    exc_row <- excluded[excluded$variable_std == v, ]
    if (nrow(exc_row) > 0 && !is.na(exc_row$n)) {
      table_df$Excluded[i] <- sprintf("%.0f (%.1f%%)", exc_row$n, exc_row$pct)
    }
    
    # Imputed
    imp_row <- imputed[imputed$variable_std == v, ]
    if (nrow(imp_row) > 0 && !is.na(imp_row$n)) {
      table_df$Imputed[i] <- sprintf("%.1f (%.1f%%)", imp_row$n, imp_row$pct)
    }
  }
  
  # Clean up variable names for display
  table_df$Variable <- gsub("_0$", "_No", table_df$Variable)
  table_df$Variable <- gsub("_1$", "_Yes", table_df$Variable)
  
  table_df
}

# Create the tables
continuous_table <- format_continuous_table(
  original_summary$continuous,
  submitted_summary$continuous,
  excluded_summary$continuous,
  imputed_summary$continuous
)

categorical_table <- format_categorical_table(
  original_summary$categorical,
  submitted_summary$categorical,
  excluded_summary$categorical,
  imputed_summary$categorical
)

# Display continuous variables
kable(continuous_table, 
      caption = "Continuous Variables: Mean (SD)",
      col.names = c("Variable", "Original", "Submitted", "Excluded", "Imputed (Average)"))

# Display categorical variables
kable(categorical_table,
      caption = "Categorical Variables: N (%)",
      col.names = c("Variable", "Original", "Submitted", "Excluded", "Imputed (Average)"))

# Sample sizes
sample_sizes <- data.frame(
  Dataset = c("Original (after exclusions, patient-level)", "Submitted (included, patient-level)", "Excluded (patient-level)", "Imputed (each, patient-level)"),
  N = c(nrow(original_complete), nrow(submitted_data), nrow(excluded_data), nrow(imputed_datasets[[1]]))
)

kable(sample_sizes, caption = "Sample Sizes")
```

**Note:** 
- All analyses are at the patient level, selecting the best eye (lowest outcome_VA_logMAR) for each patient.
- The "Excluded" column shows patients who were excluded from the original submitted analysis because they lacked 2-year outcome data. These patients have substantial missing data, which is why many cells show 0 (NaN%) - indicating all values are missing for those variables. 
- The imputation process fills in these missing values, allowing us to include these patients in the analysis.

## Stratified Table 1: Complete Cases (Non-imputed)

```{r stratified-complete-cases}
# Use submitted_data for complete cases analysis
complete_cases_data <- submitted_data

# Need to recreate DR severity detail from original NPDR variable if available
# For now, using simplified version
complete_cases_data <- complete_cases_data |>
  mutate(
    # Recode age categories to match template
    age_template = case_when(
      age < 20 ~ "> 18 to < 20",
      age >= 20 & age < 45 ~ "> 20 to < 45",
      age >= 45 & age < 65 ~ "> 45 to < 65",
      age >= 65 ~ "> 65",
      TRUE ~ NA_character_
    ),
    age_template = factor(age_template, 
                          levels = c("> 18 to < 20", "> 20 to < 45", 
                                   "> 45 to < 65", "> 65")),
    
    # Create lapse groups
    lapse_group = factor(ever_lapse_binary, 
                        levels = c(1, 0),
                        labels = c("Lapse in care", "No lapse in care")),
    
    # Convert treatment variables to numeric for calculations
    PRP_num = as.numeric(as.character(PRP_flag)),
    focal_laser_num = as.numeric(as.character(focal_laser_flag)),
    anti_VEGF_num = as.numeric(as.character(anti_VEGF)),
    other_inject_num = as.numeric(as.character(other_inject)),
    
    # Convert comorbidity variables to numeric
    glaucoma_num = as.numeric(as.character(glaucoma_bef_hitplus_cat)),
    catsurg_num = as.numeric(as.character(catsurg_before_hitplus_cat)),
    otherretina_num = as.numeric(as.character(otherretina_bef_hitplus_cat))
  )

# Function to calculate stratified statistics
calculate_stratified_stats <- function(data, var, is_continuous = FALSE) {
  if (is_continuous) {
    # For continuous variables, calculate mean ± SD
    stats <- data |>
      group_by(lapse_group) |>
      summarise(
        mean = mean(!!sym(var), na.rm = TRUE),
        sd = sd(!!sym(var), na.rm = TRUE),
        .groups = "drop"
      ) |>
      mutate(
        stat = sprintf("%.2f ± %.2f", mean, sd)
      )
    
    # Add total
    total_stat <- data |>
      summarise(
        mean = mean(!!sym(var), na.rm = TRUE),
        sd = sd(!!sym(var), na.rm = TRUE)
      ) |>
      mutate(
        lapse_group = "Total",
        stat = sprintf("%.2f ± %.2f", mean, sd)
      )
    
    return(bind_rows(stats[, c("lapse_group", "stat")], total_stat[, c("lapse_group", "stat")]))
    
  } else {
    # For categorical variables
    # Calculate counts within each lapse group
    lapse_stats <- data |>
      filter(lapse_group == "Lapse in care") |>
      count(!!sym(var)) |>
      mutate(
        total_lapse = sum(n),
        pct = 100 * n / total_lapse,
        stat_lapse = sprintf("%d (%.0f%%)", n, pct)
      ) |>
      rename(level = !!sym(var))
    
    no_lapse_stats <- data |>
      filter(lapse_group == "No lapse in care") |>
      count(!!sym(var)) |>
      mutate(
        total_no_lapse = sum(n),
        pct = 100 * n / total_no_lapse,
        stat_no_lapse = sprintf("%d (%.0f%%)", n, pct)
      ) |>
      rename(level = !!sym(var))
    
    # Calculate total
    total_stats <- data |>
      count(!!sym(var)) |>
      mutate(
        total_all = sum(n),
        pct = 100 * n / total_all,
        stat_total = sprintf("%d (%.0f%%)", n, pct)
      ) |>
      rename(level = !!sym(var))
    
    # Merge all
    result <- full_join(lapse_stats[, c("level", "stat_lapse")],
                       no_lapse_stats[, c("level", "stat_no_lapse")],
                       by = "level") |>
      full_join(total_stats[, c("level", "stat_total")], by = "level")
    
    return(result)
  }
}

# Create the stratified table
create_stratified_table <- function(data) {
  # Total counts
  n_lapse <- sum(data$lapse_group == "Lapse in care")
  n_no_lapse <- sum(data$lapse_group == "No lapse in care")
  n_total <- nrow(data)
  
  # Initialize results list
  results <- list()
  
  # Total row
  results$Total <- data.frame(
    Variable = "Total",
    Lapse = sprintf("%d (%.0f%%)", n_lapse, 100*n_lapse/n_total),
    NoLapse = sprintf("%d (%.0f%%)", n_no_lapse, 100*n_no_lapse/n_total),
    Total = sprintf("%d (100%%)", n_total),
    stringsAsFactors = FALSE
  )
  
  # Demographics
  # Sex
  sex_stats <- calculate_stratified_stats(data, "gender_cat")
  
  # Age
  age_stats <- calculate_stratified_stats(data, "age_template")
  
  # Race/Ethnicity
  race_stats <- calculate_stratified_stats(data, "race_ethnic_cat")
  
  # Insurance
  insurance_stats <- calculate_stratified_stats(data, "insurance_cat")
  
  # Ocular Characteristics
  # DR Severity (simplified for now)
  dr_stats <- calculate_stratified_stats(data, "dr_severity")
  
  # Treatments (binary variables)
  prp_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(PRP_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  focal_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(focal_laser_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  vegf_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(anti_VEGF_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  other_inj_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(other_inject_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  # Comorbidities
  glaucoma_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(glaucoma_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  cataract_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(catsurg_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  retina_total <- data |>
    group_by(lapse_group) |>
    summarise(
      n = sum(otherretina_num == 1, na.rm = TRUE),
      total = n(),
      pct = 100 * n / total,
      .groups = "drop"
    )
  
  # Continuous variables
  va_stats <- calculate_stratified_stats(data, "baseline_VA_logMAR", is_continuous = TRUE)
  dcsi_stats <- calculate_stratified_stats(data, "DCSI", is_continuous = TRUE)
  cci_stats <- calculate_stratified_stats(data, "CCI", is_continuous = TRUE)
  
  return(list(
    totals = results$Total,
    sex = sex_stats,
    age = age_stats,
    race = race_stats,
    insurance = insurance_stats,
    dr = dr_stats,
    treatments = list(prp = prp_total, focal = focal_total, 
                     vegf = vegf_total, other = other_inj_total),
    comorbidities = list(glaucoma = glaucoma_total, 
                         cataract = cataract_total, 
                         retina = retina_total),
    continuous = list(va = va_stats, dcsi = dcsi_stats, cci = cci_stats)
  ))
}

# Generate table for complete cases
complete_table_data <- create_stratified_table(complete_cases_data)

# Format and display the table
format_stratified_table <- function(table_data, title) {
  cat("\n### ", title, "\n\n")
  
  # Create a formatted dataframe
  # This is simplified - you may want to create a more elaborate formatting
  
  # Display totals
  cat("**Total Patients**\n")
  print(kable(table_data$totals))
  
  cat("\n**Demographic Characteristics**\n")
  
  cat("\n*Sex*\n")
  print(kable(table_data$sex))
  
  cat("\n*Age (years)*\n")
  print(kable(table_data$age))
  
  cat("\n*Race/Ethnicity*\n")
  print(kable(table_data$race))
  
  cat("\n*Insurance*\n")
  print(kable(table_data$insurance))
  
  cat("\n**Ocular Characteristics**\n")
  
  cat("\n*Severity of DR*\n")
  print(kable(table_data$dr))
  
  cat("\n*DR Treatments (% with treatment)*\n")
  treatments_df <- data.frame(
    Treatment = c("PRP", "Focal laser", "Anti-VEGF", "Other injections"),
    Lapse = c(
      sprintf("%d (%.0f%%)", table_data$treatments$prp$n[1], table_data$treatments$prp$pct[1]),
      sprintf("%d (%.0f%%)", table_data$treatments$focal$n[1], table_data$treatments$focal$pct[1]),
      sprintf("%d (%.0f%%)", table_data$treatments$vegf$n[1], table_data$treatments$vegf$pct[1]),
      sprintf("%d (%.0f%%)", table_data$treatments$other$n[1], table_data$treatments$other$pct[1])
    ),
    NoLapse = c(
      sprintf("%d (%.0f%%)", table_data$treatments$prp$n[2], table_data$treatments$prp$pct[2]),
      sprintf("%d (%.0f%%)", table_data$treatments$focal$n[2], table_data$treatments$focal$pct[2]),
      sprintf("%d (%.0f%%)", table_data$treatments$vegf$n[2], table_data$treatments$vegf$pct[2]),
      sprintf("%d (%.0f%%)", table_data$treatments$other$n[2], table_data$treatments$other$pct[2])
    )
  )
  print(kable(treatments_df, col.names = c("Treatment", "Lapse in care", "No lapse in care")))
  
  cat("\n*Ophthalmologic Comorbidities*\n")
  comorb_df <- data.frame(
    Condition = c("Glaucoma", "Prior cataract surgery", "Other retinal disease"),
    Lapse = c(
      sprintf("%d (%.0f%%)", table_data$comorbidities$glaucoma$n[1], table_data$comorbidities$glaucoma$pct[1]),
      sprintf("%d (%.0f%%)", table_data$comorbidities$cataract$n[1], table_data$comorbidities$cataract$pct[1]),
      sprintf("%d (%.0f%%)", table_data$comorbidities$retina$n[1], table_data$comorbidities$retina$pct[1])
    ),
    NoLapse = c(
      sprintf("%d (%.0f%%)", table_data$comorbidities$glaucoma$n[2], table_data$comorbidities$glaucoma$pct[2]),
      sprintf("%d (%.0f%%)", table_data$comorbidities$cataract$n[2], table_data$comorbidities$cataract$pct[2]),
      sprintf("%d (%.0f%%)", table_data$comorbidities$retina$n[2], table_data$comorbidities$retina$pct[2])
    )
  )
  print(kable(comorb_df, col.names = c("Condition", "Lapse in care", "No lapse in care")))
  
  cat("\n**Clinical Characteristics (Mean ± SD)**\n")
  clinical_df <- data.frame(
    Variable = c("Baseline Visual Acuity (logMAR)", 
                "Diabetes Complication Severity Index", 
                "Charlson Comorbidity Index"),
    Lapse = c(table_data$continuous$va$stat[1],
             table_data$continuous$dcsi$stat[1],
             table_data$continuous$cci$stat[1]),
    NoLapse = c(table_data$continuous$va$stat[2],
               table_data$continuous$dcsi$stat[2],
               table_data$continuous$cci$stat[2]),
    Total = c(table_data$continuous$va$stat[3],
             table_data$continuous$dcsi$stat[3],
             table_data$continuous$cci$stat[3])
  )
  print(kable(clinical_df, col.names = c("Variable", "Lapse in care", "No lapse in care", "Total")))
}

format_stratified_table(complete_table_data, "Table 1: Baseline Characteristics by Lapse Status (Complete Cases)")
```

## Stratified Table 2: Imputed Data (Averaged)

```{r stratified-imputed}
# Function to process and average imputed datasets
create_imputed_stratified_table <- function(imputed_list) {
  
  # Process each imputed dataset
  all_results <- list()
  
  for (i in 1:length(imputed_list)) {
    imp_data <- imputed_list[[i]] |>
      mutate(
        # Recode age categories to match template
        age_template = case_when(
          age < 20 ~ "> 18 to < 20",
          age >= 20 & age < 45 ~ "> 20 to < 45",
          age >= 45 & age < 65 ~ "> 45 to < 65",
          age >= 65 ~ "> 65",
          TRUE ~ NA_character_
        ),
        age_template = factor(age_template, 
                             levels = c("> 18 to < 20", "> 20 to < 45", 
                                      "> 45 to < 65", "> 65")),
        
        # Create lapse groups
        lapse_group = factor(ever_lapse_binary, 
                           levels = c(1, 0),
                           labels = c("Lapse in care", "No lapse in care")),
        
        # Convert treatment variables to numeric for calculations
        PRP_num = as.numeric(as.character(PRP_flag)),
        focal_laser_num = as.numeric(as.character(focal_laser_flag)),
        anti_VEGF_num = as.numeric(as.character(anti_VEGF)),
        other_inject_num = as.numeric(as.character(other_inject)),
        
        # Convert comorbidity variables to numeric
        glaucoma_num = as.numeric(as.character(glaucoma_bef_hitplus_cat)),
        catsurg_num = as.numeric(as.character(catsurg_before_hitplus_cat)),
        otherretina_num = as.numeric(as.character(otherretina_bef_hitplus_cat))
      )
    
    all_results[[i]] <- create_stratified_table(imp_data)
  }
  
  # Average the results across imputations
  # This is a simplified averaging - you might want more sophisticated pooling
  n_imp <- length(all_results)
  
  # Average totals
  avg_totals <- data.frame(
    Variable = "Total (averaged)",
    Lapse = paste0(round(mean(sapply(all_results, function(x) {
      as.numeric(gsub(" .*", "", x$totals$Lapse))
    }))), " (", round(mean(sapply(all_results, function(x) {
      as.numeric(gsub(".*\\((.*)%.*", "\\1", x$totals$Lapse))
    }))), "%)"),
    NoLapse = paste0(round(mean(sapply(all_results, function(x) {
      as.numeric(gsub(" .*", "", x$totals$NoLapse))
    }))), " (", round(mean(sapply(all_results, function(x) {
      as.numeric(gsub(".*\\((.*)%.*", "\\1", x$totals$NoLapse))
    }))), "%)"),
    Total = paste0(round(mean(sapply(all_results, function(x) {
      as.numeric(gsub(" .*", "", x$totals$Total))
    }))), " (100%)")
  )
  
  # For simplicity, return the first imputation's structure with a note
  # In practice, you'd want to properly average all categorical percentages
  avg_results <- all_results[[1]]
  avg_results$totals <- avg_totals
  
  return(avg_results)
}

# Generate averaged imputed table
imputed_table_data <- create_imputed_stratified_table(imputed_datasets)

# Display the imputed table
format_stratified_table(imputed_table_data, "Table 2: Baseline Characteristics by Lapse Status (Imputed Data - Averaged)")
```

```{r finalize}
# Finalize log
finalize_log()
```