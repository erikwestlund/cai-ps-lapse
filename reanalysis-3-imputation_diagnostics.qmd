---
title: "Reanalysis Step 3: Comprehensive Imputation Diagnostics"
subtitle: "Assessment of 2l.pan clustered multiple imputation quality"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 3
    fig-width: 10
    fig-height: 7
---

## Overview

This notebook provides comprehensive diagnostics for the 2l.pan clustered multiple imputation, assessing:

1. **Clustering structure** - Intra-patient correlations and bilateral eye relationships
2. **Cohort differences** - Submitted (observed outcomes) vs Excluded (imputed outcomes)  
3. **Imputation quality** - Distribution comparisons, temporal consistency, clinical plausibility
4. **Multiple imputation variability** - Between-imputation variance and convergence

## Setup

```{r setup}
#| include: false
source("dependencies.R")
source("functions.R")
setup_analysis(seed = 2025)

library(mice)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)

# Initialize logging
log_file <- init_log("imputation_diagnostics_combined")
```

## Data Loading

```{r load-data}
# Load original and imputed data
df_original <- readRDS(file.path(reanalysis_data_dir, "df_for_imputation.rds"))
imputed_datasets <- readRDS(file.path(reanalysis_data_dir, "imputed_datasets.rds"))
n_imputations <- length(imputed_datasets)

# Load mids object if available
if (file.exists(file.path(reanalysis_data_dir, "mids_object.rds"))) {
  mids_obj <- readRDS(file.path(reanalysis_data_dir, "mids_object.rds"))
} else {
  mids_obj <- NULL
}

# Key statistics
n_eyes <- nrow(df_original)
n_patients <- n_distinct(df_original$e_mrn_deidentified)
n_bilateral <- sum(table(df_original$e_mrn_deidentified) == 2)
n_missing_outcome <- sum(is.na(df_original$outcome_VA_logMAR))

cat(sprintf("Dataset: %d eyes from %d patients\n", n_eyes, n_patients))
cat(sprintf("Bilateral patients: %d (%.1f%%)\n", n_bilateral, 100*n_bilateral/n_patients))
cat(sprintf("Missing outcomes: %d eyes (%.1f%%)\n", n_missing_outcome, 100*n_missing_outcome/n_eyes))
cat(sprintf("Imputations performed: %d\n", n_imputations))
```

## 1. Cohort Structure Analysis

```{r cohort-structure}
# Cohort comparison
cohort_summary <- df_original |>
  group_by(cohort_id) |>
  summarise(
    n_eyes = n(),
    n_patients = n_distinct(e_mrn_deidentified),
    pct_of_total = round(100 * n_eyes / nrow(df_original), 1),
    
    # VA availability
    has_baseline = sum(!is.na(baseline_VA_logMAR)),
    has_intermediate = sum(!is.na(intermediate_VA_logMAR)),
    has_outcome = sum(!is.na(outcome_VA_logMAR)),
    
    # Clinical characteristics
    mean_age = round(mean(age, na.rm = TRUE), 1),
    pct_male = round(100 * mean(gender_cat == "Male", na.rm = TRUE), 1),
    mean_baseline_VA = round(mean(baseline_VA_logMAR, na.rm = TRUE), 3),
    
    # Key outcome: lapse rate
    pct_lapsed = round(100 * mean(ever_lapse_binary == 1, na.rm = TRUE), 1),
    
    .groups = "drop"
  )

kable(cohort_summary, 
      caption = "Cohort structure: Submitted (has 2-year outcome) vs Excluded (missing 2-year outcome)") |>
  kable_styling(full_width = FALSE)

# Missingness patterns
missing_patterns <- df_original |>
  mutate(
    pattern = case_when(
      !is.na(baseline_VA_logMAR) & !is.na(intermediate_VA_logMAR) & !is.na(outcome_VA_logMAR) ~ "Complete",
      !is.na(baseline_VA_logMAR) & !is.na(intermediate_VA_logMAR) & is.na(outcome_VA_logMAR) ~ "Missing outcome",
      !is.na(baseline_VA_logMAR) & is.na(intermediate_VA_logMAR) & is.na(outcome_VA_logMAR) ~ "Missing intermediate+outcome",
      TRUE ~ "Other"
    )
  ) |>
  group_by(cohort_id, pattern) |>
  summarise(n = n(), .groups = "drop") |>
  pivot_wider(names_from = pattern, values_from = n, values_fill = 0)

kable(missing_patterns, caption = "VA missingness patterns by cohort") |>
  kable_styling(full_width = FALSE)
```

## 2. Intra-Patient Correlation (Clustering Effect)

```{r clustering-analysis}
# Identify bilateral patients
bilateral_ids <- df_original |>
  count(e_mrn_deidentified) |>
  filter(n == 2) |>
  pull(e_mrn_deidentified)

# Calculate between-eye correlations
bilateral_data <- df_original |>
  filter(e_mrn_deidentified %in% bilateral_ids) |>
  group_by(e_mrn_deidentified) |>
  arrange(row_number()) |>
  mutate(eye = paste0("eye", row_number())) |>
  ungroup()

# Reshape for correlation
bilateral_wide <- bilateral_data |>
  select(e_mrn_deidentified, eye, baseline_VA_logMAR, intermediate_VA_logMAR, outcome_VA_logMAR) |>
  pivot_wider(names_from = eye, values_from = c(baseline_VA_logMAR, intermediate_VA_logMAR, outcome_VA_logMAR))

# Calculate observed correlations
cor_baseline <- cor(bilateral_wide$baseline_VA_logMAR_eye1, bilateral_wide$baseline_VA_logMAR_eye2, use = "complete.obs")
cor_intermediate <- cor(bilateral_wide$intermediate_VA_logMAR_eye1, bilateral_wide$intermediate_VA_logMAR_eye2, use = "complete.obs")
cor_outcome_obs <- cor(bilateral_wide$outcome_VA_logMAR_eye1, bilateral_wide$outcome_VA_logMAR_eye2, use = "complete.obs")

# Calculate imputed correlation (first imputation)
bilateral_imp <- imputed_datasets[[1]] |>
  filter(e_mrn_deidentified %in% bilateral_ids) |>
  group_by(e_mrn_deidentified) |>
  arrange(row_number()) |>
  mutate(eye = row_number()) |>
  ungroup() |>
  select(e_mrn_deidentified, eye, outcome_VA_logMAR) |>
  pivot_wider(names_from = eye, values_from = outcome_VA_logMAR, names_prefix = "outcome_eye")

# Check column names exist and calculate correlation
if ("outcome_eye1" %in% names(bilateral_imp) && "outcome_eye2" %in% names(bilateral_imp)) {
  cor_outcome_imp <- cor(bilateral_imp$outcome_eye1, bilateral_imp$outcome_eye2, use = "complete.obs")
} else {
  cor_outcome_imp <- NA
  warning("Expected columns not found in bilateral_imp")
}

# Summary table
intra_patient_cors <- data.frame(
  Timepoint = c("Baseline", "Intermediate", "Outcome (Observed)", "Outcome (After Imputation)"),
  N_Pairs = c(
    sum(complete.cases(bilateral_wide[,c("baseline_VA_logMAR_eye1", "baseline_VA_logMAR_eye2")])),
    sum(complete.cases(bilateral_wide[,c("intermediate_VA_logMAR_eye1", "intermediate_VA_logMAR_eye2")])),
    sum(complete.cases(bilateral_wide[,c("outcome_VA_logMAR_eye1", "outcome_VA_logMAR_eye2")])),
    nrow(bilateral_imp)
  ),
  Correlation = round(c(cor_baseline, cor_intermediate, cor_outcome_obs, cor_outcome_imp), 3),
  Interpretation = c(
    "Natural between-eye correlation",
    "Correlation at intermediate timepoint", 
    "Observed outcomes only (limited n)",
    "All bilateral patients after 2l.pan imputation"
  )
)

kable(intra_patient_cors, 
      caption = paste0("Intra-patient (between-eye) correlations (", length(bilateral_ids), " bilateral patients)")) |>
  kable_styling(full_width = FALSE)

# Visualization (only if correlation was calculated)
if (!is.na(cor_outcome_imp)) {
  p_bilateral <- ggplot(bilateral_imp, aes(x = outcome_eye1, y = outcome_eye2)) +
    geom_point(alpha = 0.4, color = "#2E86AB") +
    geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.5) +
    geom_smooth(method = "lm", se = TRUE, color = "red") +
    labs(
      title = sprintf("Between-Eye Correlation After 2l.pan Imputation (r = %.3f)", cor_outcome_imp),
      x = "Eye 1 Outcome VA (logMAR)",
      y = "Eye 2 Outcome VA (logMAR)"
    ) +
    theme_minimal()
  
  print(p_bilateral)
} else {
  cat("Between-eye correlation plot could not be generated.\n")
}
```

## 3. Distribution Comparison: Observed vs Imputed

```{r distribution-comparison}
# Add imputation indicators and calculate changes
changes_df <- imputed_datasets[[1]] |>
  mutate(
    outcome_was_imputed = df_original$cohort_id == "excluded",
    change_baseline_outcome = outcome_VA_logMAR - baseline_VA_logMAR,
    change_category = case_when(
      change_baseline_outcome < -0.1 ~ "Improved",
      change_baseline_outcome > 0.1 ~ "Worsened", 
      TRUE ~ "Stable"
    )
  )

# Summary statistics by imputation status
change_summary <- changes_df |>
  filter(!is.na(change_baseline_outcome)) |>
  group_by(outcome_was_imputed) |>
  summarise(
    n = n(),
    mean = round(mean(change_baseline_outcome), 3),
    sd = round(sd(change_baseline_outcome), 3),
    median = round(median(change_baseline_outcome), 3),
    q25 = round(quantile(change_baseline_outcome, 0.25), 3),
    q75 = round(quantile(change_baseline_outcome, 0.75), 3),
    .groups = "drop"
  ) |>
  mutate(Group = ifelse(outcome_was_imputed, "Imputed", "Observed"))

kable(change_summary |> select(Group, everything(), -outcome_was_imputed),
      caption = "Distribution of vision changes (outcome - baseline)") |>
  kable_styling(full_width = FALSE)

# Statistical tests
t_test <- t.test(change_baseline_outcome ~ outcome_was_imputed, data = changes_df)
ks_test <- ks.test(
  changes_df$change_baseline_outcome[changes_df$outcome_was_imputed],
  changes_df$change_baseline_outcome[!changes_df$outcome_was_imputed]
)

test_results <- data.frame(
  Test = c("Two-sample t-test", "Kolmogorov-Smirnov"),
  Statistic = round(c(t_test$statistic, ks_test$statistic), 3),
  P_Value = round(c(t_test$p.value, ks_test$p.value), 4),
  Interpretation = c(
    ifelse(t_test$p.value < 0.05, "Means differ significantly", "Means are similar"),
    ifelse(ks_test$p.value < 0.05, "Distributions differ", "Distributions are similar")
  )
)

kable(test_results, caption = "Statistical comparison of observed vs imputed changes") |>
  kable_styling(full_width = FALSE)

# Visualization
p1 <- ggplot(changes_df, aes(x = change_baseline_outcome, fill = factor(outcome_was_imputed))) +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
  scale_fill_manual(values = c("FALSE" = "#2E86AB", "TRUE" = "#A23B72"),
                    labels = c("Observed", "Imputed")) +
  labs(title = "Distribution of Vision Changes",
       x = "Change in logMAR (positive = worsening)",
       y = "Density",
       fill = "Group") +
  theme_minimal() +
  theme(legend.position = "bottom")

p2 <- ggplot(changes_df, aes(x = factor(outcome_was_imputed), y = change_baseline_outcome, 
                             fill = factor(outcome_was_imputed))) +
  geom_boxplot(alpha = 0.7) +
  geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
  scale_fill_manual(values = c("FALSE" = "#2E86AB", "TRUE" = "#A23B72")) +
  scale_x_discrete(labels = c("Observed", "Imputed")) +
  labs(title = "Vision Changes by Group",
       y = "Change in logMAR",
       x = "") +
  theme_minimal() +
  theme(legend.position = "none")

grid.arrange(p1, p2, ncol = 2)
```

## 4. Clinical Relationships: Lapse Effect

```{r lapse-analysis}
# Lapse-outcome relationship
lapse_summary <- changes_df |>
  group_by(cohort_id, ever_lapse_binary) |>
  summarise(
    n = n(),
    mean_outcome = round(mean(outcome_VA_logMAR, na.rm = TRUE), 3),
    mean_change = round(mean(change_baseline_outcome, na.rm = TRUE), 3),
    pct_VI = round(100 * mean(outcome_VA_logMAR >= 0.3, na.rm = TRUE), 1),
    .groups = "drop"
  ) |>
  mutate(lapse_status = ifelse(ever_lapse_binary == 1, "Lapsed", "Not Lapsed")) |>
  select(-ever_lapse_binary) |>
  arrange(cohort_id, lapse_status)

kable(lapse_summary, 
      caption = "Vision outcomes by lapse status and cohort") |>
  kable_styling(full_width = FALSE)

# Effect sizes
effect_sizes <- lapse_summary |>
  group_by(cohort_id) |>
  summarise(
    diff_outcome = mean_outcome[lapse_status == "Lapsed"] - mean_outcome[lapse_status == "Not Lapsed"],
    diff_change = mean_change[lapse_status == "Lapsed"] - mean_change[lapse_status == "Not Lapsed"],
    diff_VI_pct = pct_VI[lapse_status == "Lapsed"] - pct_VI[lapse_status == "Not Lapsed"],
    .groups = "drop"
  ) |>
  mutate(
    clinical_interpretation = ifelse(diff_outcome > 0, 
                                    "Lapsed have worse vision (expected)", 
                                    "Lapsed have better vision (unexpected)")
  )

kable(effect_sizes,
      caption = "Effect of lapse on outcomes (positive = worse for lapsed)") |>
  kable_styling(full_width = FALSE)

# Visualization
p_lapse <- ggplot(changes_df, 
                  aes(x = factor(ever_lapse_binary, labels = c("Not Lapsed", "Lapsed")),
                      y = outcome_VA_logMAR,
                      fill = factor(ever_lapse_binary))) +
  geom_boxplot(alpha = 0.7) +
  facet_wrap(~ cohort_id) +
  scale_fill_manual(values = c("0" = "#2E86AB", "1" = "#A23B72")) +
  labs(title = "Outcome VA by Lapse Status and Cohort",
       y = "Outcome VA (logMAR)",
       x = "") +
  theme_minimal() +
  theme(legend.position = "none")

print(p_lapse)
```

## 5. Temporal Consistency

```{r temporal-consistency}
# For patients with intermediate values, check trajectory consistency
temporal_df <- imputed_datasets[[1]] |>
  filter(!is.na(intermediate_VA_logMAR)) |>
  mutate(
    change_1 = intermediate_VA_logMAR - baseline_VA_logMAR,
    change_2 = outcome_VA_logMAR - intermediate_VA_logMAR,
    total_change = outcome_VA_logMAR - baseline_VA_logMAR,
    
    # Check arithmetic consistency
    calculated_total = change_1 + change_2,
    discrepancy = abs(total_change - calculated_total),
    
    # Check direction consistency
    trajectory_reversal = sign(change_1) != sign(change_2) & abs(change_1) > 0.1 & abs(change_2) > 0.1
  )

temporal_summary <- temporal_df |>
  group_by(cohort_id) |>
  summarise(
    n = n(),
    mean_discrepancy = round(mean(discrepancy), 5),
    max_discrepancy = round(max(discrepancy), 5),
    pct_reversals = round(100 * mean(trajectory_reversal), 1),
    # Handle correlation when SD is zero (all values the same)
    cor_segments = if(sd(change_1, na.rm = TRUE) == 0 | sd(change_2, na.rm = TRUE) == 0) {
      NA_real_
    } else {
      round(cor(change_1, change_2, use = "complete.obs"), 3)
    },
    .groups = "drop"
  )

kable(temporal_summary,
      caption = "Temporal consistency for patients with intermediate values") |>
  kable_styling(full_width = FALSE)

# Sample trajectories
set.seed(2025)
n_sample <- min(200, nrow(temporal_df))
sample_ids <- sample(1:nrow(temporal_df), n_sample)

trajectory_plot_data <- temporal_df[sample_ids,] |>
  mutate(patient_id = row_number()) |>
  select(patient_id, cohort_id, baseline_VA_logMAR, intermediate_VA_logMAR, outcome_VA_logMAR) |>
  pivot_longer(cols = c(baseline_VA_logMAR, intermediate_VA_logMAR, outcome_VA_logMAR),
               names_to = "timepoint", values_to = "VA") |>
  mutate(timepoint = factor(timepoint, 
                           levels = c("baseline_VA_logMAR", "intermediate_VA_logMAR", "outcome_VA_logMAR"),
                           labels = c("Baseline", "Intermediate", "2 Years")))

p_traj <- ggplot(trajectory_plot_data, 
                 aes(x = timepoint, y = VA, group = patient_id, color = cohort_id)) +
  geom_line(alpha = 0.3) +
  facet_wrap(~ cohort_id) +
  scale_color_manual(values = c("submitted" = "#2E86AB", "excluded" = "#A23B72")) +
  labs(title = "Sample Patient Trajectories (n=200 with intermediate values)",
       x = "", y = "VA (logMAR)") +
  theme_minimal() +
  theme(legend.position = "none")

print(p_traj)
```

## 6. Multiple Imputation Variance

```{r mi-variance}
# Calculate summary statistics across all imputations
mi_summaries <- lapply(1:n_imputations, function(i) {
  imputed_datasets[[i]] |>
    group_by(cohort_id) |>
    summarise(
      mean_outcome = mean(outcome_VA_logMAR, na.rm = TRUE),
      sd_outcome = sd(outcome_VA_logMAR, na.rm = TRUE),
      pct_VI = mean(outcome_VA_logMAR >= 0.3, na.rm = TRUE) * 100,
      .groups = "drop"
    ) |>
    mutate(imputation = i)
})

mi_combined <- bind_rows(mi_summaries)

# Calculate variance components (Rubin's rules)
mi_variance <- mi_combined |>
  group_by(cohort_id) |>
  summarise(
    # Pooled estimate
    pooled_mean = round(mean(mean_outcome), 3),
    
    # Within-imputation variance
    W = mean(sd_outcome^2),
    
    # Between-imputation variance  
    B = var(mean_outcome),
    
    # Total variance
    T = W + (1 + 1/n_imputations) * B,
    
    # Relative increase in variance due to missingness
    r = round((1 + 1/n_imputations) * B / W, 3),
    
    # Fraction of missing information
    lambda = round((B + B/n_imputations) / T, 3),
    
    .groups = "drop"
  )

kable(mi_variance |> select(cohort_id, pooled_mean, r, lambda),
      caption = "Multiple imputation variance components",
      col.names = c("Cohort", "Pooled Mean", "Relative Variance Increase", "Fraction Missing Info")) |>
  kable_styling(full_width = FALSE)

# Stability plot
p_mi <- ggplot(mi_combined, aes(x = imputation, y = mean_outcome, color = cohort_id)) +
  geom_line() +
  geom_point() +
  scale_color_manual(values = c("submitted" = "#2E86AB", "excluded" = "#A23B72")) +
  labs(title = "Mean Outcome Stability Across Imputations",
       x = "Imputation Number", 
       y = "Mean Outcome VA (logMAR)",
       color = "Cohort") +
  theme_minimal()

print(p_mi)
```

## 7. Summary Assessment

```{r summary-assessment}
cat("### Key Findings:\n\n")

# 1. Clustering
cor_preserved <- abs(cor_outcome_imp - cor_baseline) < 0.2
if (cor_preserved) {
  cat(sprintf("✓ Between-eye correlation preserved (%.3f baseline → %.3f imputed)\n", 
              cor_baseline, cor_outcome_imp))
} else {
  cat(sprintf("⚠ Between-eye correlation changed substantially (%.3f → %.3f)\n",
              cor_baseline, cor_outcome_imp))
}

# 2. Distribution similarity
if (ks_test$p.value > 0.05) {
  cat("✓ Imputed and observed distributions are statistically similar\n")
} else {
  cat("⚠ Imputed and observed distributions differ significantly\n")
}

# 3. Clinical relationships
if (all(effect_sizes$diff_outcome > 0)) {
  cat("✓ Lapsed patients have worse outcomes in all cohorts (clinically expected)\n")
} else {
  cat("⚠ Unexpected lapse-outcome relationship in some cohorts\n")
}

# 4. Temporal consistency
if (all(temporal_summary$mean_discrepancy < 0.001)) {
  cat("✓ Temporal arithmetic is preserved\n")
} else {
  cat("⚠ Minor temporal discrepancies detected\n")
}

# 5. MI stability
if (all(mi_variance$lambda < 0.5)) {
  cat("✓ Fraction of missing information is acceptable (<0.5)\n")
} else {
  cat("⚠ High fraction of missing information in some groups\n")
}

cat("\n### Interpretation:\n\n")

# Cohort differences
cat(sprintf("- The excluded cohort has %.1f%% missing outcomes (by definition)\n",
            100 - cohort_summary$has_outcome[cohort_summary$cohort_id == "excluded"] / 
            cohort_summary$n_eyes[cohort_summary$cohort_id == "excluded"] * 100))

cat(sprintf("- Lapse rate is much higher in excluded cohort (%.1f%%) vs submitted (%.1f%%)\n",
            cohort_summary$pct_lapsed[cohort_summary$cohort_id == "excluded"],
            cohort_summary$pct_lapsed[cohort_summary$cohort_id == "submitted"]))

cat("- This suggests missingness is related to lapsing (MNAR mechanism)\n")

cat("\n### Recommendations:\n\n")
cat("1. The 2l.pan method successfully accounts for clustering\n")
cat("2. Consider sensitivity analyses with alternative assumptions about lapsed patients\n")
cat("3. Report results separately by cohort when effect modification is present\n")
cat("4. Use robust standard errors to account for remaining clustering\n")

# Finalize
log_message("Combined imputation diagnostics completed")
final_log <- finalize_log(success = TRUE)
```

**Log file:** `r final_log`