---
title: "Reanalysis Step 3: Propensity Score Analysis with Twang"
subtitle: "Calculating IPTW weights using GBM across imputed datasets"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: html
---

## Setup

```{r setup}
#| include: false
# Setup analysis environment
source("dependencies.R")
setup_analysis(seed = 2025)

# Additional packages
library(twang)
library(ggplot2)
library(gridExtra)  # For arranging multiple plots
library(knitr)

# ANALYSIS MODE: Use same as imputation
analysis_mode <- "test"  # Should match imputation mode

# Set parameters based on mode
if (analysis_mode == "test") {
  max_imputations_for_diagnostics <- 2  # Show diagnostics for 2 imputations in test
  n_trees <- 1000  # Fewer trees for testing
} else {
  max_imputations_for_diagnostics <- 5  # Show diagnostics for up to 5 imputations in final
  n_trees <- 3000  # More trees for final analysis
}

message("Analysis mode: ", analysis_mode)
message("Will show diagnostics for up to ", max_imputations_for_diagnostics, " imputations")
message("Using ", n_trees, " trees for GBM")
```

## Load Imputed Datasets

```{r load-data}
# Load the imputed datasets
imputed_datasets <- readRDS(file.path(reanalysis_data_dir, "imputed_datasets.rds"))
n_imputations <- length(imputed_datasets)

message("Loaded ", n_imputations, " imputed datasets")

# Load variable lists
variable_lists <- readRDS(file.path(reanalysis_data_dir, "variable_lists.rds"))
```

## Define Enhanced Propensity Score Formula

```{r ps-formula}
# Original formula from get_matching_formula()
# Now enhanced to include DR severity and treatment type

# Create enhanced formula including person_dr and treatment interactions
ps_formula_enhanced <- as.formula("ever_lapse_binary ~ 
  baseline_VA_logMAR +
  gender_cat +
  race_ethnic_cat +
  insurance_cat +
  age_cat +
  CCI +
  DCSI +
  other_inject +
  anti_VEGF +
  focal_laser_flag +
  PRP_flag +
  glaucoma_bef_hitplus_cat +
  otherretina_bef_hitplus_cat +
  catsurg_before_hitplus_cat +
  person_dr +  # Added DR severity
  treatment_type  # Added treatment type
")

message("Propensity score formula:")
print(ps_formula_enhanced)

# Alternative: Use the standard formula from functions.R
ps_formula_standard <- get_matching_formula()

# For this analysis, we'll use the enhanced formula
ps_formula <- ps_formula_enhanced
```

## Run Twang Propensity Score Models

Following the approach in twang-analysis.Rmd, we'll use GBM via twang package to estimate propensity scores.

```{r ps-models}
# Initialize storage for PS results
twang_results <- list()

# Run twang for each imputed dataset
message("\nCalculating propensity scores using Twang GBM...")
message("Parameters:")
message("  - n.trees: ", n_trees)
message("  - interaction.depth: 3")
message("  - shrinkage: 0.01")
message("  - estimand: ATT")
message("  - stop.method: es.mean (effect size only)")

for (i in 1:n_imputations) {
  message("\nProcessing imputation ", i, " of ", n_imputations, "...")
  
  # Run twang ps model - following analysis.Rmd approach
  twang_model <- ps(
    formula = ps_formula,
    data = data.frame(imputed_datasets[[i]]),  # Convert to data.frame as in analysis.Rmd
    n.trees = n_trees,
    interaction.depth = 3,
    shrinkage = 0.01,
    estimand = "ATT",
    stop.method = c("es.mean"),  # Using es.mean only for speed
    verbose = FALSE
  )
  
  # Extract weights for ATT using es.mean
  weights <- get.weights(twang_model, stop.method = "es.mean")
  
  # Store results
  twang_results[[i]] <- list(
    model = twang_model,
    weights = weights,
    n_trees_used = twang_model$desc$es.mean$n.trees
  )
  
  message("  - Trees used (es.mean): ", twang_model$desc$es.mean$n.trees)
  message("  - Weight range: [", round(min(weights), 3), ", ", round(max(weights), 3), "]")
}

message("\nTwang propensity score calculation complete")
```

## Balance Assessment

```{r balance-assessment}
# Extract balance summaries from twang models
balance_summaries <- list()

for (i in 1:n_imputations) {
  # Get the twang model
  twang_model <- twang_results[[i]]$model
  
  # Simple approach: use summary to assess balance
  # The summary() function prints balance info but may not return it in a usable format
  # So we'll calculate basic balance metrics manually
  
  weights <- twang_results[[i]]$weights
  treated <- imputed_datasets[[i]]$ever_lapse_binary == 1
  
  # Calculate weighted balance for a few key variables
  # This is a simplified assessment
  balance_summaries[[i]] <- data.frame(
    Imputation = i,
    N_Treated = sum(treated),
    N_Control = sum(!treated),
    Mean_Weight_Treated = mean(weights[treated]),
    Mean_Weight_Control = mean(weights[!treated]),
    Max_Weight = max(weights)
  )
  
  # Print summary for diagnostic purposes (this will show balance)
  if (i <= max_imputations_for_diagnostics) {
    message("\nBalance summary for imputation ", i, ":")
    print(summary(twang_model))
  }
}

# Combine all summaries
balance_summary_all <- do.call(rbind, balance_summaries)

message("\nWeight Summary Across All Imputations:")
kable(balance_summary_all, 
      caption = "Weight distribution by imputation",
      digits = 3)

# Calculate average across imputations
avg_weights <- data.frame(
  Avg_N_Treated = mean(balance_summary_all$N_Treated),
  Avg_N_Control = mean(balance_summary_all$N_Control),
  Avg_Weight_Treated = mean(balance_summary_all$Mean_Weight_Treated),
  Avg_Weight_Control = mean(balance_summary_all$Mean_Weight_Control),
  Max_Weight_Overall = max(balance_summary_all$Max_Weight)
)

message("\nAverage Weights Across Imputations:")
kable(avg_weights,
      caption = "Average weight statistics across all imputations",
      digits = 3)

# Check weight stability
if (avg_weights$Max_Weight_Overall > 10) {
  message("\n⚠ Warning: Maximum weight > 10, indicating potential instability")
} else if (avg_weights$Max_Weight_Overall > 5) {
  message("\nNote: Maximum weight > 5, monitor for stability")
} else {
  message("\n✓ Weights appear stable (max < 5)")
}

message("\nNote: Balance statistics are shown in the summary output above.")
message("The twang package optimizes to minimize effect sizes (es.mean).")
```

## Diagnostics for Sample of Imputations

```{r diagnostics-plots}
#| fig-height: 8
#| fig-width: 10

# Select imputations to show diagnostics for
n_to_show <- min(max_imputations_for_diagnostics, n_imputations)
imps_to_show <- 1:n_to_show

message("\nGenerating twang diagnostic plots for ", n_to_show, " imputations...")

# For each selected imputation, show twang-specific diagnostics
for (i in imps_to_show) {
  message("\nDiagnostics for Imputation ", i, ":")
  
  # Get the twang model for this imputation
  twang_model <- twang_results[[i]]$model
  
  # Try to generate diagnostic plots
  tryCatch({
    # The standard twang plots
    plot(twang_model)
  }, error = function(e) {
    message("  Standard plots not available, generating custom diagnostics...")
    
    # Create custom diagnostic plots
    ps_scores <- twang_results[[i]]$ps_scores
    weights <- twang_results[[i]]$weights
    treated <- imputed_datasets[[i]]$ever_lapse_binary == 1
    
    par(mfrow = c(2, 2))
    
    # Plot 1: PS distribution by treatment
    hist(ps_scores[!treated], main = "PS Distribution - Control", 
         xlab = "Propensity Score", col = "lightblue")
    hist(ps_scores[treated], main = "PS Distribution - Treated", 
         xlab = "Propensity Score", col = "lightcoral")
    
    # Plot 2: Weight distribution
    hist(weights[!treated], main = "Weights - Control", 
         xlab = "Weight", col = "lightblue")
    hist(weights[treated], main = "Weights - Treated", 
         xlab = "Weight", col = "lightcoral")
    
    par(mfrow = c(1, 1))
  })
  
  # Print summary
  print(summary(twang_model))
}
```

## Propensity Score Distribution

```{r ps-distribution}
#| fig-height: 6
#| fig-width: 10

# Plot PS distribution for first few imputations
for (i in imps_to_show) {
  message("\nPropensity score distributions for imputation ", i)
  
  # Get propensity scores from the twang model
  twang_model <- twang_results[[i]]$model
  weights <- twang_results[[i]]$weights
  treated <- imputed_datasets[[i]]$ever_lapse_binary == 1
  
  # For twang models, propensity scores may not be directly accessible
  # We can use the weights to show distribution instead
  # Since weights = 1/PS for treated and 1/(1-PS) for control in ATT weighting
  
  # Create histograms of weights instead of propensity scores
  par(mfrow = c(1, 2))
  
  # Control group weights
  hist(weights[!treated], 
       main = paste("Weights: Control - Imputation", i),
       xlab = "Weight",
       col = "lightblue",
       breaks = 20)
  
  # Treated group weights (should all be 1 for ATT)
  hist(weights[treated],
       main = paste("Weights: Treated - Imputation", i),
       xlab = "Weight", 
       col = "lightcoral",
       breaks = 20)
  
  par(mfrow = c(1, 1))
  
  # Also show weight summary
  message("  Weight summary:")
  message("    Control: mean = ", round(mean(weights[!treated]), 3), 
          ", max = ", round(max(weights[!treated]), 3))
  message("    Treated: mean = ", round(mean(weights[treated]), 3),
          " (should be 1.0 for ATT)")
}
```


## Save Propensity Score Results

```{r save-results}
# Save twang PS results for use in outcome analysis
ps_output <- list(
  twang_results = twang_results,
  weight_summary = balance_summary_all,
  avg_weights = avg_weights,
  formula_used = ps_formula,
  n_imputations = n_imputations,
  method = "twang_gbm",
  n_trees = n_trees,
  analysis_mode = analysis_mode
)

saveRDS(ps_output, file.path(reanalysis_data_dir, "ps_results_twang.rds"))

message("\nTwang propensity score results saved to: ", 
        file.path(reanalysis_data_dir, "ps_results_twang.rds"))
```

## Summary

```{r summary}
# Final summary
message("\n=== TWANG PROPENSITY SCORE ANALYSIS SUMMARY ===")
message("Method: Generalized Boosted Models (GBM) via twang")
message("Imputations processed: ", n_imputations)
message("Analysis mode: ", analysis_mode)
message("Trees used: ", n_trees)
message("Estimand: ATT (Average Treatment Effect on the Treated)")
message("Stop method: es.mean (effect size minimization)")

# Enhanced formula summary
message("\nEnhanced formula included:")
message("  - DR severity (person_dr)")
message("  - Treatment type")
message("  - All standard covariates from original analysis")

# Weight summary  
message("\nWeight Statistics (averaged across imputations):")
message("  - Mean weight (treated): ", round(avg_weights$Avg_Weight_Treated, 3))
message("  - Mean weight (control): ", round(avg_weights$Avg_Weight_Control, 3))
message("  - Maximum weight: ", round(avg_weights$Max_Weight_Overall, 2))

# Weight stability assessment
if (avg_weights$Max_Weight_Overall > 10) {
  message("\n⚠ Warning: Maximum weight > 10, indicating potential instability")
  message("  Consider increasing n.trees or adjusting twang parameters")
} else if (avg_weights$Max_Weight_Overall > 5) {
  message("\nNote: Maximum weight > 5, monitor for stability in outcome analysis")
} else {
  message("\n✓ Weights appear stable (max < 5)")
}

message("\nBalance Assessment:")
message("  See summary output above for detailed balance statistics.")
message("  The twang package optimizes es.mean to achieve covariate balance.")
```

## Next Steps

1. **Outcome Analysis** (`reanalysis-4-outcome_analysis.qmd`):
   - Apply weights to outcome models
   - Estimate treatment effects for each imputation
   - Pool results using Rubin's rules
   
2. **Sensitivity Analysis** (`reanalysis-5-sensitivity.qmd`):
   - Compare different PS methods
   - Assess robustness to model specification