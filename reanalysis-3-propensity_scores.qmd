---
title: "Reanalysis Step 3: Propensity Score Analysis with Twang"
subtitle: "Calculating IPTW weights using GBM across imputed datasets"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: html
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
setup_analysis(seed = 2025)

library(twang)
library(ggplot2)
library(gridExtra)
library(knitr)

# ANALYSIS MODE: Use same as imputation
analysis_mode <- "final"  # Should match imputation mode

# Set parameters based on mode
if (analysis_mode == "test") {
  max_imputations_to_process <- 2  # Process only 2 imputations in test mode
  max_imputations_for_diagnostics <- 2  # Show diagnostics for 2 imputations in test
  n_trees <- 1000  # Fewer trees for testing
} else {
  max_imputations_to_process <- NULL  # Process all available imputations
  max_imputations_for_diagnostics <- 5  # Show diagnostics for up to 5 imputations in final
  n_trees <- 3000  # More trees for final analysis
}

```

**Analysis mode:** `r analysis_mode`  
**Imputations to process:** `r if(!is.null(max_imputations_to_process)) max_imputations_to_process else "all available"`  
**Diagnostics shown for:** `r max_imputations_for_diagnostics` **imputations**  
**GBM trees:** `r n_trees`

## Load Imputed Datasets

```{r load-data}
imputed_datasets <- readRDS(file.path(reanalysis_data_dir, "imputed_datasets.rds"))
n_available <- length(imputed_datasets)

# Determine how many imputations to actually process
if (!is.null(max_imputations_to_process)) {
  n_imputations <- min(max_imputations_to_process, n_available)
  
  if (n_imputations < n_available) {
    imputed_datasets <- imputed_datasets[1:n_imputations]
  }
} else {
  n_imputations <- n_available
}

```

**Available imputed datasets:** `r n_available`  
**Processing:** `r n_imputations` **datasets** `r if(analysis_mode == "test") "(test mode limit)" else "(all available)"`

```{r continue-load}

variable_lists <- readRDS(file.path(reanalysis_data_dir, "variable_lists.rds"))
```

## Define Enhanced Propensity Score Formula

```{r ps-formula}
# Original formula from get_matching_formula()
# Now enhanced to include DR severity

# Create enhanced formula including person_dr and treatment interactions
ps_formula_enhanced <- as.formula("ever_lapse_binary ~ 
  baseline_VA_logMAR +
  gender_cat +
  race_ethnic_cat +
  insurance_cat +
  age_cat +
  CCI +
  DCSI +
  other_inject +
  anti_VEGF +
  focal_laser_flag +
  PRP_flag +
  glaucoma_bef_hitplus_cat +
  otherretina_bef_hitplus_cat +
  catsurg_before_hitplus_cat +
  person_dr
")

```

**Propensity score formula:**
```{r print-formula}
print(ps_formula_enhanced)

# Alternative: Use the standard formula from functions.R
ps_formula_standard <- get_matching_formula()

# For this analysis, we'll use the enhanced formula
ps_formula <- ps_formula_enhanced
```

## Run Twang Propensity Score Models

Following the approach in twang-analysis.Rmd, we'll use GBM via twang package to estimate propensity scores.

### Model Parameters
- **Method:** Twang GBM
- **n.trees:** Set based on analysis mode (1000 for test, 3000 for final)
- **interaction.depth:** 3
- **shrinkage:** 0.01
- **estimand:** ATT
- **stop.method:** es.mean (effect size only)

```{r ps-models}
# Initialize storage for PS results
twang_results <- list()

# Track progress
progress_df <- data.frame(
  Imputation = integer(),
  Trees_Used = integer(),
  Weight_Min = numeric(),
  Weight_Max = numeric()
)

for (i in 1:n_imputations) {
  # Run twang ps model - following analysis.Rmd approach
  twang_model <- ps(
    formula = ps_formula,
    data = data.frame(imputed_datasets[[i]]),  # Convert to data.frame as in analysis.Rmd
    n.trees = n_trees,
    interaction.depth = 3,
    shrinkage = 0.01,
    estimand = "ATT",
    stop.method = c("es.mean"),  # Using es.mean only for speed
    verbose = FALSE
  )
  
  # Extract weights for ATT using es.mean
  weights <- get.weights(twang_model, stop.method = "es.mean")
  
  # Store results
  twang_results[[i]] <- list(
    model = twang_model,
    weights = weights,
    n_trees_used = twang_model$desc$es.mean$n.trees
  )
  
  # Track progress
  progress_df <- rbind(progress_df, data.frame(
    Imputation = i,
    Trees_Used = twang_model$desc$es.mean$n.trees,
    Weight_Min = round(min(weights), 3),
    Weight_Max = round(max(weights), 3)
  ))
}

# Display progress summary
kable(progress_df, caption = "Twang Model Fitting Progress")
```

## Balance Assessment

```{r balance-assessment}
# Extract balance summaries from twang models
balance_summaries <- list()

for (i in 1:n_imputations) {
  # Get the twang model
  twang_model <- twang_results[[i]]$model
  
  weights <- twang_results[[i]]$weights
  treated <- imputed_datasets[[i]]$ever_lapse_binary == 1
  
  balance_summaries[[i]] <- data.frame(
    Imputation = i,
    N_Treated = sum(treated),
    N_Control = sum(!treated),
    Mean_Weight_Treated = mean(weights[treated]),
    Mean_Weight_Control = mean(weights[!treated]),
    Max_Weight = max(weights)
  )
  
  if (i <= max_imputations_for_diagnostics) {
    # Balance summary will be shown in diagnostics section
  }
}

balance_summary_all <- do.call(rbind, balance_summaries)

```

### Weight Summary Across All Imputations

```{r weight-summary-table}
kable(balance_summary_all, 
      caption = "Weight distribution by imputation",
      digits = 3)

# Calculate average across imputations
avg_weights <- data.frame(
  Avg_N_Treated = mean(balance_summary_all$N_Treated),
  Avg_N_Control = mean(balance_summary_all$N_Control),
  Avg_Weight_Treated = mean(balance_summary_all$Mean_Weight_Treated),
  Avg_Weight_Control = mean(balance_summary_all$Mean_Weight_Control),
  Max_Weight_Overall = max(balance_summary_all$Max_Weight)
)

```

### Average Weights Across Imputations

```{r avg-weights-table}
kable(avg_weights,
      caption = "Average weight statistics across all imputations",
      digits = 3)

```

### Weight Stability Check

```{r weight-stability-check}
if (avg_weights$Max_Weight_Overall > 10) {
  print("Warning: Maximum weight > 10, indicating potential instability")
} else if (avg_weights$Max_Weight_Overall > 5) {
  print("Note: Maximum weight > 5, monitor for stability")
} else {
  print("Weights appear stable (max < 5)")
}
```

## Diagnostics for Sample of Imputations

Showing diagnostic plots for the first **`r min(max_imputations_for_diagnostics, n_imputations)`** imputations.

```{r diagnostics-plots}
#| fig-height: 8
#| fig-width: 10

n_to_show <- min(max_imputations_for_diagnostics, n_imputations)
imps_to_show <- 1:n_to_show
```

```{r diagnostics-loop}
#| results: "asis"

# Generate diagnostic plots for selected imputations
for (i in imps_to_show) {
  cat("\n### Imputation", i, "\n\n")
  
  twang_model <- twang_results[[i]]$model
  weights <- twang_results[[i]]$weights
  
  # Create dataset with weights for cobalt
  data_with_weights <- imputed_datasets[[i]]
  data_with_weights$weights <- weights
  
  cat("#### Convergence (Iteration Plot)\n\n")
  # Plot 1: Shows how balance metrics change across iterations
  print(plot(twang_model, plots = 1))
  cat("\n\n")
  
  cat("#### Weight Distribution (Boxplot)\n\n")
  # Plot 2: Shows distribution of weights
  print(plot(twang_model, plots = 2))
  cat("\n\n")
  
  cat("#### Covariate Balance (Standardized Mean Differences)\n\n")
  # Plot 3: Shows balance for each covariate
  print(plot(twang_model, plots = 3))
  cat("\n\n")
  
  cat("#### Love Plot\n\n")
  # Use cobalt for better visualization
  love_plot <- love.plot(
    bal.tab(ps_formula, 
            data = data_with_weights,
            weights = "weights",
            estimand = "ATT",
            s.d.denom = "treated"),
    thresholds = c(m = 0.1),
    title = paste("Covariate Balance - Imputation", i)
  )
  print(love_plot)
  cat("\n\n")
  
  cat("#### Weight Histogram\n\n")
  # Plot 6: Histogram of weight proportions
  print(plot(twang_model, plots = 6))
  cat("\n\n")
  
  cat("#### Balance Summary Table\n\n")
  
  # Get balance statistics from the twang model
  # The bal.table function gives us the detailed balance statistics
  tryCatch({
    bal_table <- bal.table(twang_model, digits = 4)
    
    # Extract the summary statistics for the optimal stopping point
    # twang stores these in the desc slot
    es_mean_stats <- twang_model$desc$es.mean
    
    # Safely extract values with error checking
    safe_round <- function(x, digits = 4) {
      if (is.null(x) || !is.numeric(x)) return(NA)
      return(round(x, digits))
    }
    
    # Create a clean summary table
    summary_df <- data.frame(
      Metric = c("N Treated", "N Control", 
                 "ESS Treated", "ESS Control",
                 "Max ES", "Mean ES", "Max KS",
                 "Iterations"),
      Unweighted = c(
        es_mean_stats$n.treat,
        es_mean_stats$n.ctrl,
        es_mean_stats$n.treat,  # ESS = n for unweighted
        es_mean_stats$n.ctrl,    # ESS = n for unweighted
        safe_round(bal_table$unw$max.es, 4),
        safe_round(bal_table$unw$mean.es, 4),
        safe_round(bal_table$unw$max.ks, 4),
        NA
      ),
      Weighted = c(
        es_mean_stats$n.treat,
        es_mean_stats$n.ctrl,
        safe_round(es_mean_stats$ess.treat, 2),
        safe_round(es_mean_stats$ess.ctrl, 2),
        safe_round(bal_table$es.mean$max.es, 4),
        safe_round(bal_table$es.mean$mean.es, 4),
        safe_round(bal_table$es.mean$max.ks, 4),
        es_mean_stats$n.trees
      )
    )
    
    kable(summary_df, 
          caption = paste("Balance Summary for Imputation", i),
          align = c('l', 'r', 'r'))
    
  }, error = function(e) {
    # Fallback to simpler summary if bal.table fails
    cat("Note: Detailed balance table unavailable. Showing basic summary:\n\n")
    
    # Use the summary method which is more reliable
    sum_output <- summary(twang_model)
    
    # Try to extract key metrics from the summary
    if (!is.null(sum_output)) {
      print(sum_output)
    } else {
      cat("Balance statistics not available for this imputation.\n")
    }
  })
  
  cat("\n\n")
}
```

## Propensity Score Distribution

```{r ps-distribution}
#| fig-height: 6
#| fig-width: 10

# Create weight distribution summary
weight_dist_summary <- data.frame(
  Imputation = integer(),
  Control_Mean = numeric(),
  Control_Max = numeric(),
  Treated_Mean = numeric()
)

# Plot PS distribution for first few imputations
for (i in imps_to_show) {
  
  twang_model <- twang_results[[i]]$model
  weights <- twang_results[[i]]$weights
  treated <- imputed_datasets[[i]]$ever_lapse_binary == 1
  
  par(mfrow = c(1, 2))
  
  # Control group weights
  hist(weights[!treated], 
       main = paste("Weights: Control - Imputation", i),
       xlab = "Weight",
       col = "lightblue",
       breaks = 20)
  
  # Treated group weights (should all be 1 for ATT)
  hist(weights[treated],
       main = paste("Weights: Treated - Imputation", i),
       xlab = "Weight", 
       col = "lightcoral",
       breaks = 20)
  
  par(mfrow = c(1, 1))
  
  # Store weight summary
  weight_dist_summary <- rbind(weight_dist_summary, data.frame(
    Imputation = i,
    Control_Mean = round(mean(weights[!treated]), 3),
    Control_Max = round(max(weights[!treated]), 3),
    Treated_Mean = round(mean(weights[treated]), 3)
  ))
}

# Display weight distribution summary
kable(weight_dist_summary, 
      caption = "Weight Distribution by Imputation",
      col.names = c("Imputation", "Control Mean", "Control Max", "Treated Mean (should be 1.0 for ATT)"))
```


## Save Propensity Score Results

```{r save-results}
# Extract weights from all twang models for easy access in later steps
twang_weights <- list()
for (i in 1:n_imputations) {
  twang_weights[[i]] <- get.weights(twang_results[[i]], stop.method = "es.mean")
}

ps_output <- list(
  twang_results = twang_results,
  weight_summary = balance_summary_all,
  avg_weights = avg_weights,
  formula_used = ps_formula,
  n_imputations = n_imputations,
  method = "twang_gbm",
  n_trees = n_trees,
  analysis_mode = analysis_mode
)

saveRDS(ps_output, file.path(reanalysis_data_dir, "ps_results_twang.rds"))
saveRDS(twang_weights, file.path(reanalysis_data_dir, "twang_weights.rds"))

```

**Propensity score results saved to:** `r file.path(reanalysis_data_dir, "ps_results_twang.rds")`
**Weights saved to:** `r file.path(reanalysis_data_dir, "twang_weights.rds")`

## Summary

### Analysis Configuration

**Method:** Generalized Boosted Models (GBM) via twang  
**Estimand:** ATT (Average Treatment Effect on the Treated)  
**Stop Method:** es.mean (effect size minimization)  

```{r summary-config}
config_summary <- data.frame(
  Parameter = c("Analysis Mode", "Imputations Processed", "Trees per Model"),
  Value = c(analysis_mode, n_imputations, n_trees)
)

kable(config_summary, caption = "Run Configuration")
```

### Formula Components

The enhanced propensity score formula includes:
- DR severity (person_dr)
- Treatment type variables
- All standard covariates from original analysis

```{r summary-formula}
print(ps_formula)
```

### Weight Statistics Summary

```{r summary-weights}
weight_stats <- data.frame(
  Statistic = c("Mean Weight (Treated)", "Mean Weight (Control)", "Maximum Weight"),
  Value = c(round(avg_weights$Avg_Weight_Treated, 3),
           round(avg_weights$Avg_Weight_Control, 3),
           round(avg_weights$Max_Weight_Overall, 2))
)

kable(weight_stats, caption = "Weight Statistics (Averaged Across Imputations)")
```
