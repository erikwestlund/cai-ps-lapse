---
title: "Reanalysis Step 9: Alternative Propensity Score Specifications"
subtitle: "Comprehensive comparison of PS methods with multiple imputation using strategy pattern"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-depth: 3
    fig-width: 10
    fig-height: 8
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
source("functions.R")  # Load formula definitions and helper functions
source("alt_specs.R")  # Load strategy pattern implementation
setup_analysis(seed = 2025)

library(ggplot2)
library(knitr)

# Initialize logging
log_file <- init_log("alternative_ps_methods")

# Check for required files
required_files <- c(
  "imputed_datasets.rds",
  "variable_lists.rds"
)

missing_files <- c()
for (file in required_files) {
  if (!file.exists(file.path(reanalysis_data_dir, file))) {
    missing_files <- c(missing_files, file)
  }
}

if (length(missing_files) > 0) {
  stop(paste("Required files not found. Please run previous steps first:\n",
             "- Step 1 (Data Preparation) creates: variable_lists.rds\n",
             "- Step 2 (Multiple Imputation) creates: imputed_datasets.rds\n",
             "Missing files:", paste(missing_files, collapse = ", ")))
}

# Load imputed datasets
imputed_datasets <- readRDS(file.path(reanalysis_data_dir, "imputed_datasets.rds"))
n_imputations <- length(imputed_datasets)

# Load variable lists
variable_lists <- readRDS(file.path(reanalysis_data_dir, "variable_lists.rds"))

# ANALYSIS MODE: "test" or "final"
analysis_mode <- "final"  # Change to "test" for quick testing with 2 imputations

# Get configuration based on mode
config <- get_analysis_config(analysis_mode)

# Cache configuration
use_cache <- TRUE
cache_dir <- file.path(reanalysis_data_dir, "ps_alternative_methods")

log_message(paste0("Analysis mode: ", analysis_mode))
log_message(paste0("Processing up to ", config$n_imputations, " of ", n_imputations, " available imputations"))
log_message(paste0("Caching: ", ifelse(use_cache, "ENABLED", "DISABLED")))
log_message(paste0("Cache directory: ", cache_dir))
```

**Analysis Configuration:**
- Mode: `r analysis_mode`
- Maximum imputations to process: `r config$n_imputations`
- Available imputations: `r n_imputations`
- Cache: `r ifelse(use_cache, "Enabled", "Disabled")`

## Define Formulas

```{r define-formulas}
# Get PS formula using reanalysis version (includes dr_severity)
ps_formula <- get_matching_formula_reanalysis()

# Get outcome formula
outcome_formulas <- get_analysis_formulas_reanalysis()
outcome_formula <- outcome_formulas$full

log_message("Propensity Score Formula:")
print(ps_formula)

log_message("Outcome Formula:")
print(outcome_formula)
```

## Available Methods

```{r show-methods}
# Get list of available methods
available_methods <- names(get_ps_methods(config))

cat("\nAvailable PS methods to run:\n")
for (method in available_methods) {
  cat(" -", method, "\n")
}

# Define all available methods
all_methods <- c(
  "nearest_glm",
  "nearest_gam", 
  "nearest_gbm",
  "nearest_lasso",
  "nearest_rpart",
  "nearest_mahalanobis",
  "subclass_glm",
  "cbps",
  "entropy",
  "bart",
  "twang_gbm"  # Will load from reanalysis-4 if available
)

# Define completed methods (add to this list as methods complete successfully)
completed_methods <- c(
  "nearest_glm",  # Completed successfully
  "nearest_gam",  # Completed successfully
  "nearest_gbm",  # Completed successfully
  "nearest_lasso",  # Completed successfully
  "nearest_rpart",  # Completed successfully
  "nearest_mahalanobis",  # Completed successfully
  "subclass_glm",  # Completed successfully
  "cbps",  # Completed successfully
  "entropy",  # Completed successfully
  "bart"  # Completed successfully
  # "twang_gbm"  # Failed - needs rerun after fix
)

# Methods to run = all methods minus completed ones
methods_to_run <- setdiff(all_methods, completed_methods)

# Optionally, you can also explicitly exclude problematic methods
methods_to_exclude <- c(
  # Add any methods that consistently fail or you want to skip
)
methods_to_run <- setdiff(methods_to_run, methods_to_exclude)

log_message(paste0("Will run ", length(methods_to_run), " methods"))
if (length(completed_methods) > 0) {
  log_message(paste0("Skipping completed: ", paste(completed_methods, collapse = ", ")))
}
```

## Run Complete Analysis

```{r run-analysis}
# Run the complete analysis using the strategy pattern from alt_specs.R
# This will run all specified methods, fit outcome models, and pool results

results <- run_alternative_ps_analysis(
  imputed_datasets = imputed_datasets,
  ps_formula = ps_formula,
  outcome_formula = outcome_formula,
  mode = analysis_mode,
  cache_dir = cache_dir,
  use_cache = use_cache,
  methods_to_run = methods_to_run,
  all_methods = all_methods  # Pass all methods so completed ones can be loaded from cache
)

# Extract components
ps_results <- results$ps_results
outcome_results <- results$outcome_results
pooled_results <- results$pooled_results
forest_data <- results$forest_data
summary_table <- results$summary_table

# Save pooled results for later use
saveRDS(pooled_results, file.path(reanalysis_data_dir, "alternative_ps_results_pooled.rds"))
log_message("Saved pooled results")
```

## Forest Plot

```{r forest-plot}
#| fig.height: 10
#| fig.width: 8

# Create forest plot matching the style of results-summary.Rmd
# Add colors for specific methods
forest_data$color <- "black"
if ("twang_gbm" %in% forest_data$method) {
  forest_data$color[forest_data$method == "twang_gbm"] <- "blue"
}

# Add a naive/unadjusted estimate if we want to show it as reference
# (Would need to run this separately if desired)

# Create the plot
forest_plot <- ggplot(forest_data, aes(x = reorder(method_label, or), y = or)) +
  geom_pointrange(aes(ymin = lower, ymax = upper, color = color), size = 0.8) +
  geom_point(aes(color = color), size = 3) +
  geom_text(aes(label = sprintf("%.2f", or), color = color), 
            vjust = -1.2, hjust = 0.5, size = 4) +
  coord_flip() +
  scale_color_identity() +
  scale_y_continuous(breaks = seq(0.5, max(forest_data$upper) + 0.5, by = 0.1),
                     trans = "log",
                     labels = function(x) sprintf("%.1f", x)) +
  scale_x_discrete(expand = c(0.075, 0.075)) +
  theme_minimal(base_size = 14) +
  labs(
    x = element_blank(),
    y = "Odds Ratio",
    title = "Propensity Score Method Comparison with Multiple Imputation",
    subtitle = paste0("Based on ", config$n_imputations, " imputations with Rubin's pooling"),
    caption = paste0("\nAll methods use ATT (Average Treatment Effect in the Treated) estimand.\n",
                    "IPTW = Inverse probability of treatment weighting.\n",
                    ifelse("twang_gbm" %in% forest_data$method,
                          "twang GBM (shown in blue) is the primary method reported in the paper.",
                          ""))
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", margin = margin(b = 10)),
    plot.subtitle = element_text(hjust = 0.5, margin = margin(b = 15)),
    legend.position = "none",
    axis.line = element_line(color = "gray80"),
    axis.text = element_text(color = "gray30"),
    axis.ticks = element_line(color = "gray80"),
    axis.title.x = element_text(margin = margin(t = 10)),
    plot.caption = element_text(margin = margin(t = 15), hjust = 0),
    plot.margin = margin(20, 20, 30, 20)
  ) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "gray70") +
  geom_hline(yintercept = 1, linetype = "dashed", color = "gray30")

print(forest_plot)

# Save the plot
ggsave(
  filename = file.path(reanalysis_data_dir, "forest_plot_ps_methods_imputed.png"),
  plot = forest_plot,
  width = 10,
  height = 8,
  dpi = 300
)

log_message("Forest plot saved")
```

## Summary Table

```{r summary-table}
# Display the summary table
kable(summary_table, 
      caption = "Pooled Effect Estimates Across Propensity Score Methods",
      col.names = c("Method", "Odds Ratio", "95% CI", "P-value", "N Imputations"),
      align = c("l", "r", "c", "r", "r"))

# Save to CSV for external use
write.csv(summary_table, 
          file.path(reanalysis_data_dir, "ps_methods_comparison_table.csv"),
          row.names = FALSE)

log_message("Summary table saved to CSV")
```

## Method Comparison

```{r method-comparison}
# Compare all methods to twang_gbm as reference
print_method_comparison(pooled_results, reference_method = "twang_gbm")
```

## Individual Method Details

```{r method-details}
# Show detailed results for each method
cat("\n", paste(rep("=", 60), collapse = ""), "\n")
cat("DETAILED RESULTS BY METHOD\n")
cat(paste(rep("=", 60), collapse = ""), "\n\n")

for (method_name in names(pooled_results)) {
  res <- pooled_results[[method_name]]
  if (res$success) {
    cat(paste0("Method: ", method_name, "\n"))
    cat(paste0("  Odds Ratio: ", sprintf("%.3f", res$or), "\n"))
    cat(paste0("  95% CI: (", sprintf("%.3f", res$or_ci_lower), 
              ", ", sprintf("%.3f", res$or_ci_upper), ")\n"))
    cat(paste0("  P-value: ", sprintf("%.4f", res$p_value), "\n"))
    cat(paste0("  Log OR (SE): ", sprintf("%.3f", res$estimate), 
              " (", sprintf("%.3f", res$se), ")\n"))
    cat(paste0("  N imputations: ", res$n_imputations, "\n"))
    cat(paste0("  Degrees of freedom: ", sprintf("%.1f", res$df), "\n\n"))
  }
}
```

## Diagnostics Summary

```{r diagnostics-summary}
# Summarize success rates for each method
cat("\n", paste(rep("=", 60), collapse = ""), "\n")
cat("PROPENSITY SCORE ESTIMATION SUCCESS RATES\n")
cat(paste(rep("=", 60), collapse = ""), "\n\n")

for (method_name in names(ps_results)) {
  method_results <- ps_results[[method_name]]
  n_success <- sum(sapply(method_results, function(x) !is.null(x) && x$success))
  n_total <- length(method_results)
  success_rate <- 100 * n_success / n_total
  
  cat(sprintf("%-20s: %d/%d successful (%.1f%%)\n", 
             method_name, n_success, n_total, success_rate))
}
```

## Summary

This analysis compared **`r length(pooled_results)` different propensity score methods** across **`r config$n_imputations` multiply imputed datasets**. Results were pooled using Rubin's rules to properly account for between-imputation variability.

### Key Findings:

```{r key-findings}
# Find min and max effect sizes
or_values <- sapply(pooled_results, function(x) if(x$success) x$or else NA)
or_values <- or_values[!is.na(or_values)]

min_method <- names(which.min(or_values))
max_method <- names(which.max(or_values))

cat(paste0("- Method with smallest effect: ", min_method, 
          " (OR = ", sprintf("%.3f", min(or_values)), ")\n"))
cat(paste0("- Method with largest effect: ", max_method, 
          " (OR = ", sprintf("%.3f", max(or_values)), ")\n"))
cat(paste0("- Range of odds ratios: ", sprintf("%.3f to %.3f", 
          min(or_values), max(or_values)), "\n"))

if ("twang_gbm" %in% names(or_values)) {
  twang_or <- or_values["twang_gbm"]
  cat(paste0("- twang GBM (primary method): OR = ", sprintf("%.3f", twang_or), "\n"))
  
  # How many methods are within 10% of twang
  within_10pct <- sum(abs(or_values / twang_or - 1) <= 0.10)
  cat(paste0("- Methods within 10% of twang GBM: ", within_10pct, 
            " out of ", length(or_values), "\n"))
}
```

### Analysis Details:
- **Estimand:** ATT (Average Treatment Effect in the Treated)
- **Imputation method:** Multiple imputation using mice
- **Pooling method:** Rubin's rules
- **Outcome model:** Survey-weighted logistic regression with cluster-robust SEs

## Session Info

```{r session-info}
# Finalize logging
log_message("Analysis completed successfully")
finalize_log(success = TRUE)

# Print session information
sessionInfo()
```