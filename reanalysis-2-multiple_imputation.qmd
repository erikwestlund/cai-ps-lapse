---
title: "Reanalysis Step 2: Multiple Imputation"
subtitle: "Imputing missing values using mice package"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: html
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
setup_analysis(seed = 2025)

# Additional packages for imputation
library(mice)
library(VIM)
library(naniar)

# ANALYSIS MODE: "test" or "final"
# test = 2 imputations, 5 iterations (fast)
# final = 30 imputations, 20 iterations (slow but thorough)
analysis_mode <- "test"  # Change to "final" for production run

# Set parameters based on mode
if (analysis_mode == "test") {
  n_imputations <- 2
  n_iterations <- 2
  message("Running in TEST mode: ", n_imputations, " imputations, ", n_iterations, " iterations")
} else if (analysis_mode == "final") {
  n_imputations <- 10
  n_iterations <- 20
  message("Running in FINAL mode: ", n_imputations, " imputations, ", n_iterations, " iterations")
} else {
  stop("Invalid analysis_mode. Must be 'test' or 'final'")
}
```

## Load Prepared Data

```{r load-data}
# Load the prepared dataset from Step 1
df_for_imputation <- readRDS(file.path(reanalysis_data_dir, "df_for_imputation.rds"))
variable_lists <- readRDS(file.path(reanalysis_data_dir, "variable_lists.rds"))

ps_model_vars <- variable_lists$ps_model_vars
outcome_model_vars <- variable_lists$outcome_model_vars
```

## Define Variables for Imputation

```{r define-imputation-vars}
# Variables to include in imputation model
# Include: outcome, exposure, all covariates source variables only
# Derived variables will be recreated post-imputation

# Core analysis variables - SOURCE ONLY
imputation_vars <- c(
  "e_mrn_deidentified",
  
  # Outcome variable - SOURCE ONLY
  "outcome_VA_logMAR",  # Continuous version (source)
  # NOT outcome_va_vi_binary - derived from logMAR >= 0.3
  
  # Exposure
  "ever_lapse_binary",
  
  # Demographics/Clinical
  "baseline_VA_logMAR",
  "gender_cat",
  "race_ethnic_cat",
  "insurance_cat",
  "age",  # Continuous age (source)
  # NOT age_cat - derived from cut(age)
  "CCI",
  "DCSI",
  
  # Treatment indicators - ALL SOURCES
  "other_inject",
  "anti_VEGF",
  "focal_laser_flag",
  "PRP_flag",
  # NOT treatment_type or any_treatment - derived from these 4
  
  # Comorbidities (already recoded to 0/1)
  "glaucoma_bef_hitplus_cat",
  "otherretina_bef_hitplus_cat",
  "catsurg_before_hitplus_cat",
  
  # DR severity - use person_dr (created from No_DR/NPDR/PDR)
  "person_dr"  # Numeric 0/1/2
  # NOT dr_severity or person_dr_severity - derived from person_dr
)

df_mice <- df_for_imputation |>
  dplyr::select(dplyr::all_of(imputation_vars)) |>
  mutate(
    # Convert person_dr to ordered factor for polr imputation method
    person_dr = factor(person_dr, levels = c(0, 1, 2), 
                      labels = c("No_DR", "NPDR", "PDR"),
                      ordered = TRUE),
    # Lock factor levels for categorical variables to ensure consistency
    gender_cat = factor(gender_cat),
    race_ethnic_cat = factor(race_ethnic_cat),
    insurance_cat = factor(insurance_cat)
  )
```

## Setup Imputation Model

```{r setup-mice}
# Initialize mice
# First, do a dry run to check the imputation setup
mice_dry <- mice(df_mice, maxit = 0, printFlag = FALSE)

# Print initial imputation model summary
message("Total variables in dataset: ", ncol(df_mice))
message("Variables to be imputed: ", sum(mice_dry$nmis > 0))
message("Total missing values: ", sum(mice_dry$nmis))
message("Missing data by variable:")
miss_vars <- data.frame(
  Variable = names(mice_dry$nmis),
  N_Missing = mice_dry$nmis,
  Pct_Missing = round(mice_dry$nmis/nrow(df_mice) * 100, 1)
) |>
  filter(N_Missing > 0) |>
  arrange(desc(N_Missing))

print(miss_vars)

method_table <- data.frame(
  Variable = names(mice_dry$method),
  Method = mice_dry$method,
  stringsAsFactors = FALSE
) |>
  filter(Method != "")

message("Default imputation methods:")
print(method_table)

# Customize imputation methods as needed
custom_methods <- mice_dry$method

custom_methods["CCI"] <- "pmm"  # Predictive mean matching for count data
custom_methods["DCSI"] <- "pmm"  # Predictive mean matching for count data
custom_methods["baseline_VA_logMAR"] <- "pmm"
custom_methods["age"] <- "pmm"
custom_methods["outcome_VA_logMAR"] <- "pmm"

# Use proportional odds model for ordinal person_dr (0/1/2)
custom_methods["person_dr"] <- "polr"  # Ordinal logistic regression

# Use logistic regression for binary variables
custom_methods["catsurg_before_hitplus_cat"] <- "logreg"

# Use polytomous regression for categorical variables with >2 levels
custom_methods["race_ethnic_cat"] <- "polyreg"
custom_methods["insurance_cat"] <- "polyreg"

# Don't impute these variables
# Method = "" means: don't impute (but still use as predictor EXCEPT for ID)
custom_methods["e_mrn_deidentified"] <- ""  # ID - never impute, never use as predictor
custom_methods["ever_lapse_binary"] <- ""  # Complete - use as predictor only
custom_methods["glaucoma_bef_hitplus_cat"] <- ""  # Already recoded to 0/1
custom_methods["otherretina_bef_hitplus_cat"] <- ""  # Already recoded to 0/1
custom_methods["gender_cat"] <- ""  # Likely complete
custom_methods["other_inject"] <- ""  # Likely complete
custom_methods["anti_VEGF"] <- ""  # Likely complete  
custom_methods["focal_laser_flag"] <- ""  # Likely complete
custom_methods["PRP_flag"] <- ""  # Likely complete

# Note: Variables with method = "" (except ID) are STILL USED as predictors for other variables
# They just aren't imputed themselves. The ID is excluded from both imputation and prediction.

# Check predictor matrix (which variables predict which)
pred_matrix <- mice_dry$predictorMatrix

# Don't use ID as predictor AND don't impute it
pred_matrix[, "e_mrn_deidentified"] <- 0
pred_matrix["e_mrn_deidentified", ] <- 0

# Ensure outcome is used to predict missingness (important for MAR assumption)
pred_matrix[, "outcome_VA_logMAR"] <- 1
pred_matrix["outcome_VA_logMAR", "outcome_VA_logMAR"] <- 0  # Don't predict itself

# Ensure exposure is used as predictor
pred_matrix[, "ever_lapse_binary"] <- 1
pred_matrix["ever_lapse_binary", "ever_lapse_binary"] <- 0

# Print final imputation model configuration
message("FINAL IMPUTATION MODEL")

# Summary of methods
final_methods <- data.frame(
  Variable = names(custom_methods),
  Method = custom_methods,
  Type = dplyr::case_when(
    custom_methods == "" ~ "Predictor only (not imputed)",
    custom_methods == "pmm" ~ "Predictive mean matching",
    custom_methods == "polr" ~ "Proportional odds regression",
    custom_methods == "logreg" ~ "Logistic regression",
    custom_methods == "polyreg" ~ "Polytomous regression",
    TRUE ~ custom_methods
  ),
  stringsAsFactors = FALSE
)

# Sort to show imputed variables first
final_methods <- final_methods |>
  dplyr::arrange(Method == "", Variable)

message("Imputation methods by variable:")
print(final_methods)

# Show which variables will be imputed
vars_to_impute <- names(custom_methods)[custom_methods != ""]
message("Variables that WILL be imputed (", length(vars_to_impute), " total):")
print(vars_to_impute)

# Show predictor matrix summary
message("Predictor matrix summary:")
message("- Each variable uses ", sum(pred_matrix[1,]), " predictors on average")
message("- Variables used as predictors:")
predictors <- names(which(colSums(pred_matrix) > 0))
print(predictors)

# Print model parameters
message("Imputation Parameters:")
message("Mode: ", analysis_mode)
message("Number of imputations (m): ", n_imputations)
message("Max iterations per imputation (maxit): ", n_iterations)
message(paste("Random seed: ", seed))
```

## Run Multiple Imputation

```{r run-imputation}
# Run mice imputation
# Note: Parameters are set based on analysis_mode in setup
message("Starting multiple imputation...")
message("Mode: ", analysis_mode)
message("Imputations: ", n_imputations)
message("Iterations: ", n_iterations)

if (analysis_mode == "test") {
  message("This should take a few minutes...")
} else {
  message("This may take 15-30 minutes or more...")
}

mice_results <- mice(
  df_mice,
  m = n_imputations,
  method = custom_methods,
  predictorMatrix = pred_matrix,
  maxit = n_iterations,  # Uses n_iterations from setup
  seed = 2025,
  printFlag = TRUE
)

# Check convergence
plot(mice_results)
```

## Imputation Diagnostics

```{r imputation-diagnostics}
# Check imputed values for key variables

# CCI - compare observed vs imputed
if(sum(is.na(df_mice$CCI)) > 0) {
  densityplot(mice_results, ~ CCI) |> print()
  stripplot(mice_results, CCI ~ .imp, pch = 20, cex = 1.2) |> print()
}

# DCSI - compare observed vs imputed  
if(sum(is.na(df_mice$DCSI)) > 0) {
  densityplot(mice_results, ~ DCSI) |> print()
  stripplot(mice_results, DCSI ~ .imp, pch = 20, cex = 1.2) |> print()
}

# Baseline VA - compare observed vs imputed
if(sum(is.na(df_mice$baseline_VA_logMAR)) > 0) {
  densityplot(mice_results, ~ baseline_VA_logMAR) |> print()
  stripplot(mice_results, baseline_VA_logMAR ~ .imp, pch = 20, cex = 1.2) |> print()
}

# Person DR - compare observed vs imputed (categorical)
if(sum(is.na(df_mice$person_dr)) > 0) {
  # For categorical variables, check proportions across imputations
  # Extract each imputation and tabulate
  dr_props <- sapply(1:n_imputations, function(i) {
    imp_data <- complete(mice_results, i)
    prop.table(table(imp_data$person_dr))
  })
  
  message("Proportion of DR severity across imputations:")
  message("No_DR: ", round(mean(dr_props[1,]), 3), " (SD: ", round(sd(dr_props[1,]), 3), ")")
  message("NPDR: ", round(mean(dr_props[2,]), 3), " (SD: ", round(sd(dr_props[2,]), 3), ")")
  message("PDR: ", round(mean(dr_props[3,]), 3), " (SD: ", round(sd(dr_props[3,]), 3), ")")
  
  # Visual check if stripplot works with factors
  tryCatch({
    stripplot(mice_results, person_dr ~ .imp, pch = 20, cex = 1.2) |> print()
  }, error = function(e) {
    message("Note: Stripplot not available for categorical person_dr")
  })
}

# Check imputation quality for categorical variables
# Cataract surgery
if(sum(is.na(df_mice$catsurg_before_hitplus_cat)) > 0) {
  # Extract proportions for each imputation
  cat_props <- sapply(1:n_imputations, function(i) {
    imp_data <- complete(mice_results, i)
    prop.table(table(imp_data$catsurg_before_hitplus_cat))
  })
  
  message("Proportion of cataract surgery across imputations:")
  if(is.matrix(cat_props)) {
    for(i in 1:nrow(cat_props)) {
      message("Level ", rownames(cat_props)[i], ": ", 
              round(mean(cat_props[i,]), 3), " (SD: ", round(sd(cat_props[i,]), 3), ")")
    }
  } else {
    message("Prop = ", round(mean(cat_props), 3), " (SD: ", round(sd(cat_props), 3), ")")
  }
}
```

## Create Complete Datasets and Derive Variables

```{r complete-datasets}
# Extract all imputed datasets
imputed_datasets <- complete(mice_results, action = "all")

# Apply transformation functions to recreate derived variables
message("Recreating derived variables for each imputed dataset...")

imputed_datasets <- lapply(1:n_imputations, function(i) {
  imp_data <- imputed_datasets[[i]]
  
  # Apply transformation functions to recreate all derived variables
  imp_data <- imp_data |>
    create_outcome_variables() |>  # Creates outcome_va_vi_binary from logMAR
    create_age_cat() |>  # Creates age_cat from continuous age  
    create_treatment_type() |>  # Creates treatment_type and any_treatment
    create_dr_severity_variables()  # Creates dr_severity factor from person_dr
  
  return(imp_data)
})

# Add back any variables not included in imputation or transformation
# Get the full original dataset
df_original_full <- df_for_imputation

# Variables to add back (those not in imputation model or created by transformations)
vars_in_imputed <- names(imputed_datasets[[1]])
vars_to_add <- setdiff(names(df_original_full), vars_in_imputed)

if(length(vars_to_add) > 0) {
  message("Adding back ", length(vars_to_add), " variables not in imputation model...")
  
  # Add these variables back to each imputed dataset
  imputed_datasets <- lapply(imputed_datasets, function(imp_data) {
    imp_data <- imp_data |>
      left_join(
        df_original_full |> 
          dplyr::select(e_mrn_deidentified, dplyr::all_of(vars_to_add)),
        by = "e_mrn_deidentified",
        relationship = "many-to-many"  # Expected: multiple eyes per patient
      )
    
    return(imp_data)
  })
}

completeness_check <- lapply(imputed_datasets, function(d) {
  sum(!complete.cases(d[, ps_model_vars]))
})

message("Number of incomplete cases in PS model variables per imputed dataset:")
print(unlist(completeness_check))
```

## Save Imputed Datasets

```{r save-imputed}
saveRDS(mice_results, file.path(reanalysis_data_dir, "mice_results.rds"))
saveRDS(imputed_datasets, file.path(reanalysis_data_dir, "imputed_datasets.rds"))
saveRDS(imputed_datasets[[1]], file.path(reanalysis_data_dir, "imputed_dataset_1.rds"))
message("Saved ", n_imputations, " imputed datasets to: ", reanalysis_data_dir)
```

## Summary

```{r summary}
summary_table <- tibble(
  Metric = c(
    "Original observations",
    "Variables in imputation model",
    "Variables with missing data",
    "Number of imputations",
    "Maximum missing percentage",
    "Imputation iterations"
  ),
  Value = c(
    nrow(df_mice),
    ncol(df_mice),
    sum(mice_results$nmis > 0),
    n_imputations,
    paste0(round(max(mice_results$nmis/nrow(df_mice)) * 100, 1), "%"),
    mice_results$iteration
  )
)

summary_table |>
  kable(caption = "Multiple imputation summary")

imputed_vars <- names(mice_results$nmis)[mice_results$nmis > 0]
message("Variables that were imputed:")
print(imputed_vars)
```

