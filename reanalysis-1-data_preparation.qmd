---
title: "Reanalysis Step 1: Data Preparation"
subtitle: "Loading and preparing the combined dataset for multiple imputation analysis"
author: "Erik Westlund"
date: "`r Sys.Date()`"
format: html
---

## Setup

```{r setup}
#| include: false
source("dependencies.R")
source("functions.R")  # Load formula definitions and helper functions
setup_analysis(seed = 2025)
```

## Data Loading

```{r load-data}
df_combined <- readr::read_csv(reanalysis_data_file_path)
```

## Define Analysis Variables

```{r define-variables}
ps_vars <- c(
  "baseline_VA_logMAR",
  "gender",
  "race_ethnicity_gp", 
  "insurance_gp",
  "age",
  "CCI",
  "DCSI",
  "other_inject",
  "anti_VEGF",
  "focal_laser_flag",
  "PRP_flag",
  "Glaucoma_bef_hitplus",
  "Otherretina_bef_hitplus",
  "cataract_surgery_bef_hitplus"
)

outcome_vars <- c(
  "outcome_VA_logMAR",
  "person_ever_lapse",
  "cohort_id"  # Indicates if true 2-year outcome is available
)

dr_vars <- c(
  "No_DR",
  "NPDR",
  "PDR"
)

all_analysis_vars <- c(
  "e_mrn_deidentified",  # Patient ID
  ps_vars,
  outcome_vars,
  dr_vars
)
```

## Missing Data Handling Strategy

1. **Visual Acuity Outcomes (Temporal Structure)**:

- `cohort_id = "submitted"`: Has true 2-year outcome VA
- `cohort_id = "excluded"`: Lacks true 2-year outcome
  - Any existing outcome_VA_logMAR value is an intermediate follow-up
  - These intermediate values will be moved to a new variable
  - True 2-year outcome will be imputed using temporal structure

2. **Glaucoma/Other Retina Conditions**: Missing values are recoded as 0 (absence of condition)
   
- Clinical assumption: These conditions would be documented if present
- This recoding happens BEFORE propensity score modeling
- Maintains consistency with original analysis

3. **CCI/DCSI**:

- Original analysis excluded rows with missing CCI/DCSI; this was only ~10 records
- Reanalysis will impute these using patient demographics and clinical characteristics

4. **New analysis variables**: 

- This includes DR severity and treatment
- Missing values will be handled via multiple imputation in the next step


## Variable Creation

```{r create-variables}
# Step 1: Handle temporal VA structure
# Create intermediate_VA_logMAR and adjust outcome_VA_logMAR based on cohort_id
df_analysis <- df_combined |>
  mutate(
    # Initialize intermediate VA variable
    intermediate_VA_logMAR = NA_real_,
    
    # For "excluded" cohort, move outcome values to intermediate
    # These are intermediate follow-ups, not true 2-year outcomes
    intermediate_VA_logMAR = if_else(
      cohort_id == "excluded" & !is.na(outcome_VA_logMAR),
      outcome_VA_logMAR,
      intermediate_VA_logMAR
    ),
    
    # For "submitted" cohort with observed outcome, use outcome as intermediate
    # If we have 2-year outcome, patient must have had intermediate value
    intermediate_VA_logMAR = if_else(
      cohort_id == "submitted" & !is.na(outcome_VA_logMAR),
      outcome_VA_logMAR,
      intermediate_VA_logMAR
    ),
    
    # Set outcome to NA for "excluded" cohort (will be imputed)
    outcome_VA_logMAR = if_else(
      cohort_id == "excluded",
      NA_real_,
      outcome_VA_logMAR
    ),
    
    # Convert cohort_id to factor
    cohort_id = factor(cohort_id)
  )

# Step 2: Create person_dr (needed for imputation)
df_analysis <- df_analysis |>
  create_person_dr()  # Creates person_dr from No_DR/NPDR/PDR

# Step 3: Create other core variables
df_analysis <- df_analysis |>
  mutate(
    # Exposure variable
    ever_lapse_binary = if_else(person_ever_lapse == TRUE, 1, 0),
    
    # Demographic factors (keep as factors for models)
    gender_cat = factor(gender),
    race_ethnic_cat = factor(race_ethnicity_gp),
    insurance_cat = factor(insurance_gp),
    
    # Comorbidity indicators as factors (missing = no condition)
    glaucoma_bef_hitplus_cat = factor(case_when(
      Glaucoma_bef_hitplus == "Present" ~ 1,
      TRUE ~ 0  # Includes NA values coded as 0 (no glaucoma)
    )),
    otherretina_bef_hitplus_cat = factor(case_when(
      Otherretina_bef_hitplus == "Present" ~ 1,
      TRUE ~ 0  # Includes NA values coded as 0 (no other retina condition)
    )),
    catsurg_before_hitplus_cat = factor(cataract_surgery_bef_hitplus),
    
    # Treatment indicators as factors
    other_inject = factor(other_inject),
    anti_VEGF = factor(anti_VEGF),
    focal_laser_flag = factor(focal_laser_flag),
    PRP_flag = factor(PRP_flag)
  )

# Step 4: Create derived variables using transformation functions
df_analysis <- df_analysis |>
  create_outcome_variables() |>  # Creates outcome_va_vi_binary from logMAR
  create_age_cat() |>  # Creates age_cat from continuous age
  create_treatment_type() |>  # Creates treatment_type and any_treatment
  create_dr_severity_variables()  # Creates person_dr_severity and dr_severity factor
```

## Missing Data Assessment

```{r missing-assessment}
# Get variable lists from functions.R
reanalysis_vars <- get_reanalysis_variables()

# Variables used in propensity score model (standard version)
ps_model_vars <- reanalysis_vars$ps_model_vars

# Variables used in outcome model
outcome_model_vars <- c(
  "outcome_va_vi_binary",
  ps_model_vars  # All PS vars are also in outcome model
)

# Assess missing data BEFORE recoding
missing_before_recoding <- df_combined |>
  dplyr::select(dplyr::all_of(c(
    "baseline_VA_logMAR", 
    "CCI", 
    "DCSI", 
    "Glaucoma_bef_hitplus",
    "Otherretina_bef_hitplus",
    "cataract_surgery_bef_hitplus"
  ))) |>
  dplyr::summarise(dplyr::across(everything(), ~ sum(is.na(.)))) |>
  tidyr::pivot_longer(everything(), names_to = "variable", values_to = "n_missing_original")

# Assess missing data AFTER recoding
missing_summary <- df_analysis |>
  dplyr::select(dplyr::all_of(c(ps_model_vars, "outcome_va_vi_binary", 
                                "outcome_VA_logMAR", "intermediate_VA_logMAR", "cohort_id"))) |>
  dplyr::summarise(dplyr::across(everything(), ~ sum(is.na(.)))) |>
  tidyr::pivot_longer(everything(), names_to = "variable", values_to = "n_missing") |>
  dplyr::mutate(
    pct_missing = round(n_missing / nrow(df_analysis) * 100, 2),
    var_type = dplyr::case_when(
      variable %in% c("outcome_va_vi_binary", "outcome_VA_logMAR") ~ "Outcome",
      variable == "intermediate_VA_logMAR" ~ "Intermediate (temporal)",
      variable == "cohort_id" ~ "Cohort indicator",
      variable == "ever_lapse_binary" ~ "Exposure",
      variable %in% c("glaucoma_bef_hitplus_cat", "otherretina_bef_hitplus_cat") ~ "Covariate (recoded)",
      TRUE ~ "Covariate"
    ),
    handling = dplyr::case_when(
      variable %in% c("glaucoma_bef_hitplus_cat", "otherretina_bef_hitplus_cat") ~ "Missing → 0 (no condition)",
      variable == "cohort_id" ~ "Never missing (complete)",
      variable == "intermediate_VA_logMAR" ~ "To be imputed (temporal predictor)",
      variable == "outcome_VA_logMAR" ~ "To be imputed (respecting temporal order)",
      variable %in% c("CCI", "DCSI") ~ "To be imputed",
      TRUE ~ "To be imputed"
    )
  ) |>
  dplyr::arrange(desc(n_missing))

missing_summary |> 
  filter(n_missing > 0) |>
  kable(caption = "Variables with missing data after recoding (glaucoma/retina conditions coded as 0)")
```

## Temporal VA Structure Summary

```{r temporal-va-summary}
# Summary of temporal VA structure
temporal_summary <- df_analysis |>
  group_by(cohort_id) |>
  summarise(
    n = n(),
    n_has_outcome = sum(!is.na(outcome_VA_logMAR)),
    n_has_intermediate = sum(!is.na(intermediate_VA_logMAR)),
    n_has_baseline = sum(!is.na(baseline_VA_logMAR)),
    .groups = "drop"
  ) |>
  mutate(
    pct_has_outcome = round(100 * n_has_outcome / n, 1),
    pct_has_intermediate = round(100 * n_has_intermediate / n, 1),
    pct_has_baseline = round(100 * n_has_baseline / n, 1)
  )

kable(temporal_summary,
      caption = "Visual acuity data availability by cohort",
      col.names = c("Cohort", "N", "Has Outcome", "Has Intermediate", "Has Baseline",
                   "% Outcome", "% Intermediate", "% Baseline"))

# Verify the temporal recoding worked correctly
n_submitted_with_outcome <- sum(df_analysis$cohort_id == "submitted" & !is.na(df_analysis$outcome_VA_logMAR))
n_submitted_with_intermediate <- sum(df_analysis$cohort_id == "submitted" & !is.na(df_analysis$intermediate_VA_logMAR))

verification_results <- data.frame(
  Check = c("Excluded cohort with outcome VA (should be 0)",
            "Submitted cohort: intermediate matches outcome count"),
  Count = c(
    sum(df_analysis$cohort_id == "excluded" & !is.na(df_analysis$outcome_VA_logMAR)),
    paste(n_submitted_with_intermediate, "vs", n_submitted_with_outcome)
  ),
  Status = c(
    ifelse(sum(df_analysis$cohort_id == "excluded" & !is.na(df_analysis$outcome_VA_logMAR)) == 0, "✓ Pass", "✗ Fail"),
    ifelse(n_submitted_with_intermediate == n_submitted_with_outcome, "✓ Pass", "✗ Fail")
  )
)

kable(verification_results, caption = "Temporal recoding verification")
```

## Data Summary for Analysis Variables

```{r data-summary}
summary_vars <- c(
  "outcome_va_vi_binary",
  "ever_lapse_binary", 
  "dr_severity",
  "treatment_type",
  "age",
  "CCI",
  "DCSI"
)

df_analysis |>
  dplyr::select(dplyr::all_of(summary_vars)) |>
  summary()

table(df_analysis$outcome_va_vi_binary, df_analysis$ever_lapse_binary, 
      dnn = c("Vision Impairment", "Ever Lapsed"))

table(df_analysis$dr_severity, useNA = "ifany")

table(df_analysis$treatment_type, useNA = "ifany")
```

## Dataset for Imputation

```{r imputation-dataset}
df_for_imputation <- df_analysis

# Complete cases should have no missing data in key analysis variables
# This includes outcome, exposure, and all covariates
key_vars_for_complete <- c(
  "outcome_VA_logMAR",  # Outcome
  "ever_lapse_binary",   # Exposure
  "baseline_VA_logMAR",  # Key covariate
  "CCI", "DCSI",        # Comorbidity scores
  "any_treatment"        # Treatment status
)

df_complete_original <- df_analysis |>
  filter(complete.cases(pick(all_of(key_vars_for_complete))))

n_total <- nrow(df_analysis)
n_complete_original <- nrow(df_complete_original)
n_gained_by_imputation <- n_total - n_complete_original

tibble(
  Dataset = c(
    "Full dataset (for imputation)",
    "Complete cases (no missing in key variables)", 
    "Additional observations from imputation"
  ),
  N = c(n_total, n_complete_original, n_gained_by_imputation),
  Percent = c(
    100, 
    round(n_complete_original/n_total*100, 1), 
    round(n_gained_by_imputation/n_total*100, 1)
  )
) |>
  kable(caption = "Sample size comparison: Imputation vs complete case approach")
```

## Save Prepared Data

```{r save-data}
if (!dir.exists(reanalysis_data_dir)) {
  dir.create(reanalysis_data_dir, recursive = TRUE)
}

saveRDS(df_for_imputation, file.path(reanalysis_data_dir, "df_for_imputation.rds"))
saveRDS(df_complete_original, file.path(reanalysis_data_dir, "df_complete_original.rds"))

# Use centralized variable lists from functions.R
variable_lists <- reanalysis_vars
variable_lists$outcome_model_vars <- outcome_model_vars
variable_lists$all_analysis_vars <- all_analysis_vars

saveRDS(variable_lists, file.path(reanalysis_data_dir, "variable_lists.rds"))

# Create a variable to show in text
data_save_path <- reanalysis_data_dir
```

**Data saved to:** `r data_save_path`

## Summary

```{r summary}
# Final summary
tibble(
  Metric = c(
    "Total observations",
    "Complete cases (no missing in key variables)", 
    "Missing outcome VA (to be imputed)",
    "Missing CCI or DCSI (to be imputed)",
    "Missing baseline VA (to be imputed)",
    "Patients who lapsed",
    "Patients with vision impairment (observed)"
  ),
  N = c(
    nrow(df_for_imputation),
    nrow(df_complete_original),
    sum(is.na(df_for_imputation$outcome_VA_logMAR)),
    sum(is.na(df_for_imputation$CCI) | is.na(df_for_imputation$DCSI)),
    sum(is.na(df_for_imputation$baseline_VA_logMAR)),
    sum(df_for_imputation$ever_lapse_binary == 1, na.rm = TRUE),
    sum(df_for_imputation$outcome_va_vi_binary == 1, na.rm = TRUE)
  )
) |>
  kable(caption = "Dataset summary for reanalysis with imputation")
```

